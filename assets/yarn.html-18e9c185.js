import{_ as e,p as r,q as a,Q as n,a1 as i}from"./framework-7e1a102e.js";const t={},d=i(`<h2 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> yarn</h2><ul><li><p><code>yarn add name -D</code> <code>yarn add global nrm</code></p></li><li><p>yarn remove 卸载包</p></li><li><p>yarn create xxx yyy 相当于全局安装 xxx 再执行 xxx yyy</p></li><li><p>设置国内源 <code>yarn config set registry https://registry.npmmirror.com</code>; 查看源地址信息： <code>yarn config get registry</code></p></li></ul><p><code>yarn config set registry https://registry.npm.taobao.org/</code></p><ul><li>yarn global list --depth=0 查看全局安装的包</li></ul><p>yarn config set electron_mirror https://npmmirror.com/mirroes/electron/</p><h3 id="yarn-2" tabindex="-1"><a class="header-anchor" href="#yarn-2" aria-hidden="true">#</a> yarn 2</h3><ul><li>Yarn 并不会拷贝依赖到 node_modules 目录，而是会在 .pnp.js 中记录下该依赖在缓存中的具体位置。这样就避免了大量的 I/O 操作同时项目目录也不会有 node_modules 目录生成</li></ul><p>需要忽略</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.yarn/cache
.yarn/unplugged
.yarn/install-state.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function l(o,s){return r(),a("div",null,[n(`
 * @LastEditTime: 2023-09-15 21:03:32
`),d])}const p=e(t,[["render",l],["__file","yarn.html.vue"]]);export{p as default};

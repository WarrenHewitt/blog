import{_ as c,M as p,p as l,q as i,R as n,N as a,V as e,t as s,a1 as u}from"./framework-7e1a102e.js";const r={},k={class:"table-of-contents"},d=u(`<p>[toc]</p><h1 id="elementui-tree-组件-实现自定义勾选父子选项" tabindex="-1"><a class="header-anchor" href="#elementui-tree-组件-实现自定义勾选父子选项" aria-hidden="true">#</a> ElementUI Tree 组件，实现自定义勾选父子选项</h1><blockquote><p>创建时间：2020-11-02</p></blockquote><h2 id="为什么要自定义实现勾选-而不是采用其自带的勾选" tabindex="-1"><a class="header-anchor" href="#为什么要自定义实现勾选-而不是采用其自带的勾选" aria-hidden="true">#</a> 为什么要自定义实现勾选，而不是采用其自带的勾选？</h2><ol><li><p>当设置了：复选框 和 <code>check-strictly = false(默认)</code> 父子关联，会出现：</p><ul><li>选中父级，勾选所有子选项；取消父级选中，同时取消子选项勾选</li><li>选中子选项，父选项变为半选中状态，如果勾选所有子选项，父选项为选中状态</li></ul></li><li><p>当设置了：复选框 和 <code>check-strictly = true</code> 父子无关联，会出现：</p><ul><li>父级的选中和取消选中，都不会对子选项的状态有任何的影响</li><li>子选项的选中和取消，都不会对父选项的状态有任何的影响</li></ul></li></ol><p>综合上述现象：<strong>如果想单独只选中父选项，不选择任一子选项</strong>，功能无法实现，所以采用自定义勾选</p><h2 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤" aria-hidden="true">#</a> 实现步骤</h2><p>既然使用自定义勾选，所以采用 <code>check-strictly = true</code> 父子无关联</p><p>html 代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree</span>
    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cusTreeRef<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">show-checkbox</span>
    <span class="token attr-name">check-strictly</span>
    <span class="token attr-name">default-expand-all</span>
    <span class="token attr-name">node-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>treeData<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultProps<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCheck<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tree</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>当前选中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ cusChecked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue 代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;children&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;label&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">treeData</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;一级 1&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;二级 4&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;三级 9&#39;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;三级 10&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;四级级 11&#39;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;四级级 12&#39;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cusChecked</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">handleCheck</span> <span class="token punctuation">(</span><span class="token parameter">currentNode<span class="token punctuation">,</span> treeStatus</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">,</span> treeStatus<span class="token punctuation">)</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@des</span> 根据父元素的勾选或取消勾选，将所有子级处理为选择或非选中状态
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span> node<span class="token operator">:</span> Object <span class="token punctuation">}</span></span>  <span class="token parameter">当前节点</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span> status<span class="token operator">:</span> Boolean <span class="token punctuation">}</span></span> <span class="token parameter">（true</span> ： 处理为勾选状态 ； false： 处理非选中）
     */</span>
    <span class="token keyword">const</span> <span class="token function-variable function">setChildStatus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> status</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 这里的 id children 也可以是其它字段，根据实际的业务更改 */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cusTreeRef<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">,</span> status<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 循环递归处理子节点 */</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setChildStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 设置父节点为选中状态 */</span>
    <span class="token keyword">const</span> <span class="token function-variable function">setParentStatus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nodeObj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 拿到tree组件中的node,使用该方法的原因是第一次传入的 node 没有 parent */</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cusTreeRef<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeObj<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cusTreeRef<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token function">setParentStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 判断当前点击是选中还是取消选中操作 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>treeStatus<span class="token punctuation">.</span>checkedKeys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setParentStatus</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span>
        <span class="token function">setChildStatus</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 取消选中 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setChildStatus</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>cusChecked <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cusTreeRef<span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码核心功能说明：</p><ol><li><p>判断点击是选中操作，还是取消选中操作</p></li><li><p>如果是选中，则递归的去选中其父级，以及其所有子选项</p></li><li><p>如果是取消选中，则递归的将子选项的状态改为非选中</p></li></ol>`,14),v={href:"https://github.com/WarrenHewitt/blog/issues",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const t=p("router-link"),o=p("ExternalLinkIcon");return l(),i("div",null,[n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#为什么要自定义实现勾选-而不是采用其自带的勾选"},{default:e(()=>[s("为什么要自定义实现勾选，而不是采用其自带的勾选？")]),_:1})]),n("li",null,[a(t,{to:"#实现步骤"},{default:e(()=>[s("实现步骤")]),_:1})])])]),d,n("blockquote",null,[n("p",null,[s("欢迎交流 "),n("a",v,[s("Github"),a(o)])])])])}const f=c(r,[["render",m],["__file","elementUiTree.html.vue"]]);export{f as default};

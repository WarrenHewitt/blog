import{_ as e,M as p,p as o,q as c,Q as i,R as n,t as s,N as l,a1 as a}from"./framework-7e1a102e.js";const u={},r=a('<h1 id="vue-3" tabindex="-1"><a class="header-anchor" href="#vue-3" aria-hidden="true">#</a> vue-3</h1><h2 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建" aria-hidden="true">#</a> 项目创建</h2><p>创建一个 Vue 应用 <code>npm create vue@latest</code> 根据提示选择自己想要的项目</p><p>用 npm 安装</p><p>https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application</p><p>选择： TS、 Vue Router、 Pinia、 ESlint 、 Prettier</p><ul><li>开启 &quot;typescript.validate.enable&quot;: true, 用户设置，eslint 即可生效</li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2>',8),d={href:"https://class-component.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[n("p",null,"组件不强制要求唯一跟标签")],-1),v=n("li",null,[n("p",null,"编写组件引入时 会报 TS6307 重启一下编辑器就好")],-1),m=n("li",null,[n("p",null,"只需要安装 Sass 包 才能正常使用 sass")],-1),b=n("li",null,[n("p",null,[n("code",null,"app.component('SomeName', SomeComponent)"),s(" 名称用大驼峰 使用时可以用 "),n("code",null,"<SomeName/> <some-name/>")])],-1),h=a(`<h3 id="引入一些类型" tabindex="-1"><a class="header-anchor" href="#引入一些类型" aria-hidden="true">#</a> 引入一些类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> type <span class="token punctuation">{</span> CSSProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> <span class="token comment">// css 属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="周期函数" tabindex="-1"><a class="header-anchor" href="#周期函数" aria-hidden="true">#</a> 周期函数</h2><p>https://v3.cn.vuejs.org/guide/composition-api-lifecycle-hooks.html</p><h3 id="hooks-和-mixins" tabindex="-1"><a class="header-anchor" href="#hooks-和-mixins" aria-hidden="true">#</a> Hooks 和 Mixins</h3><p>mixins 的缺点： 1. 数据来源不明，因为是隐式传入，没有显示的调用，都是传进来后自动挂载； 2. 同名的数据和方法问题 3. minins 和组件是多对多的关系，会导致定位问题异常复杂</p><p>hooks 可以独立抽取为方法，封装 CompositionAPI，然后各地方独立引用</p><hr><h3 id="composition-api-组合式-api" tabindex="-1"><a class="header-anchor" href="#composition-api-组合式-api" aria-hidden="true">#</a> composition API 组合式 API</h3><h4 id="获取元素" tabindex="-1"><a class="header-anchor" href="#获取元素" aria-hidden="true">#</a> 获取元素</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 这里ref的值和下面返回的值要一致 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ref<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> myRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// myRef.value // 返回DOM</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    proxy<span class="token punctuation">.</span>myRef <span class="token comment">// 返回DOM</span>

    <span class="token keyword">return</span> myRef
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> setup</h4><ul><li><p>在 beforCreate 之前执行，并且替换了 beforCreate created 周期函数</p></li><li><p>返回值：</p><ol><li>对象（对象的属性、方法，在模板中可以直接使用）</li><li>函数（定义渲染内容） 参考下方示例</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * props 使用时不要直接用es6的解构，如果要用，可以用 toRefs 处理后解构 组件外部传递进来 且组件内部声明接收了的属性
     * context  上下文对象
     * context.attrs 组件外部传入的 没有在 props 配置中声明的属性，相当于 this.$attrs
     * context.slots 相当于 this.$slots
     * context.emit 相当于 this.$emit
     */</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 返回一个对象 */</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      value<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/* 返回一个渲染函数， 模板内容会被全部替换为该内容 */</span>
    <span class="token comment">// return () =&gt; h(&#39;pre&#39;, &#39;code pre&#39;)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="setup-语法糖" tabindex="-1"><a class="header-anchor" href="#setup-语法糖" aria-hidden="true">#</a> setup 语法糖</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 组件直接引入，可以直接使用</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 定义 props</span>
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>reactive() 创建响应数据 类似原来的 data 数据</li></ul><h5 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref()</h5><p>目的是让一些定义的基本数据类型，可以成为响应式的数据</p><p>基本数据类型，响应式依然使用的是 <code>Object.defineProperty()</code> 返回的是 refImpl (reference implement) 引用实现的实例对象，通俗的叫法是 引用对象</p><p>对象类型数据：响应式采用 reactive； ref(obj) 等价于 reactive({value: obj})，原理是采用 Proxy 拦截 然后 使用 Reflect 对属性进行操作</p><p>当挂载到 reactive() 上时，会自动把响应式数据对象展开为原始的值，不需通过 .value 就可以直接被访问</p><p>vue 模板中使用可以不加 .value 访问， js 代码中通过 .value 获取变量值</p><p>用 isRef 来判断是否是 ref() 创建的值</p><h4 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive" aria-hidden="true">#</a> reactive()</h4><p>定义对象的响应式数据 （无法处理基本类型）</p><p>原理是使用 Proxy 代理拦截，所以利用下标修改数组 也可以被监听到</p><p>可直接获取对象属性</p><hr><ul><li>toRefs()</li></ul><p>将 reactive() 创建出来的响应式对象，转换为每个属性节点都是 ref() 类型的响应式数据</p><ul><li>返回 state 时 如果要解构对象，需要用 toRefs 处理一下</li></ul><h6 id="computed-函数" tabindex="-1"><a class="header-anchor" href="#computed-函数" aria-hidden="true">#</a> computed() 函数</h6><p>用来创建计算属性，返回值是一个 ref 的实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 只读</span>
<span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可读 可赋值</span>
<span class="token keyword">const</span> addPlus <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> count<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可赋值的使用</span>
addPlus<span class="token punctuation">.</span>value <span class="token operator">=</span> addPlus<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="provide-和-inject" tabindex="-1"><a class="header-anchor" href="#provide-和-inject" aria-hidden="true">#</a> provide() 和 inject()</h5><p>可以实现嵌套组件之间的数据传递。在 setup() 函数中使用。父级组件中使用 provide() 函数向下传递数据；子级组件中使用 inject() 获取上层传递过来的数据。</p><h5 id="watcheffect-watch" tabindex="-1"><a class="header-anchor" href="#watcheffect-watch" aria-hidden="true">#</a> watchEffect | watch</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 1. 立即执行 2. 可以停止监听 3. 会自动收集依赖 4.只能监听某个值，不能监听对象  5. 不能获取oldvalue newvalue
 * 6. 内部可以有异步操作
 */</span>
<span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// stop</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleStop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听不再有效</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 第一个参数可以为以下
 * 第二个参数为回调函数
 * 第三个参数可以为：immediate deep
 * 参考： https://cn.vuejs.org/api/reactivity-core.html#watch
 */</span>
<span class="token comment">// 1. 一个函数返回一个值：一般用于监听 reactive 的属性，因为不能直接监听reactive属性，所以采用函数返回值的形式</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发：re.count = 2</span>
<span class="token comment">/* 监听 props 值，如 re.count 替换成 props.someKey */</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> re<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;watch&quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 侦听源是一个 ref：</span>
<span class="token keyword">const</span> rf <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发：rf.value = 1</span>
<span class="token function">watch</span><span class="token punctuation">(</span>rf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;rf watch：&quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 直接监听响应式对象，侦听器自动处于深层级模式，注意无法得到旧值</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发：re.count = 2</span>
<span class="token function">watch</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;re watch：&quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 当使用函数作源时，只在此函数的返回值发生变化时才会启动。需要明确地用 { deep: true } 才能进入深层级模式</span>
<span class="token comment">// const re = reactive({ count: 1 }) // 触发：re.count = 2</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> re<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;re watch：&quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 5. 一个数组</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rf <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>re<span class="token punctuation">,</span> rf<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>ren<span class="token punctuation">,</span> rfn<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>reo<span class="token punctuation">,</span> rfo<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一个数组全是新值，第二个数组全是旧值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;re rf&quot;</span><span class="token punctuation">,</span> ren<span class="token punctuation">,</span> rfn<span class="token punctuation">,</span> reo<span class="token punctuation">,</span> rfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function f(g,y){const t=p("ExternalLinkIcon");return o(),c("div",null,[i(`
 * @Author: warren
 * @Date: 2022-03-22 19:03:09
 * @LastEditors: warren
 * @LastEditTime: 2024-02-06 10:56:03
`),r,n("ul",null,[n("li",null,[n("p",null,[s("Vue Class Component ：使用类的形式写 vue 组件 "),n("a",d,[s("地址"),l(t)])])]),k,v,m,b]),h])}const x=e(u,[["render",f],["__file","vue3.html.vue"]]);export{x as default};

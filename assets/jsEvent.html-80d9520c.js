import{_ as t,M as e,p,q as o,R as n,t as c,N as i,a1 as s}from"./framework-7e1a102e.js";const l={},u=s(`<h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><ul><li><p>ondblclick 双击事件</p></li><li><p>onwheel 鼠标滚轮事件</p></li><li><p>oncontextmenu 鼠标右键点击，一般用作更改右键弹出选项</p></li><li><p>内联事件 <code>onkeyup=&quot;handleEnter(event, type, this, &#39;2333&#39;)&quot;&gt;</code> 传递 event, 这里名称必须是event</p></li><li><p>判断输入回车</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>inputElement<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token string">&quot;13&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　<span class="token comment">// 判断回车</span>
　　<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>onbeforeunload 页面刷新和关闭时触发</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 最好body上添加事件 兼容性较好 onbeforeunload:  </span>
window<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onbeforeunload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token comment">// 兼容IE8和Firefox 4之前的版本</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 没有设置 不会有弹窗提示 */</span>
        e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token string">&#39;关闭提示&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 没有返回 不会有弹窗提示 */</span>
    <span class="token comment">// Chrome, Safari, Firefox 4+, Opera 12+ , IE 9+</span>
    <span class="token keyword">return</span> <span class="token string">&#39;关闭提示&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
<span class="token comment">// 顺序 onload  onbeforeunload  onunload </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>visibilitychange document.visibilityState 发生变化，即会触发</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>visibilityState <span class="token comment">// visible 页面内容至少是部分可见  hidden 页面不可见  prerender 页面正在渲染中，所以不可见</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;visibilitychange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;visibilityState&#39;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>visibilityState<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>focus blur freeze resume 等 网页的生命周期事件监听 参考： https://www.ruanyifeng.com/blog/2018/11/page_lifecycle_api.html</p></li><li><p>onerror 无法监听资源加载的错误，只能声明一次 不能重复执行多个回调 可以换成 window.addEventListener(&#39;error&#39;),能监听网络错误 但是不知道状态</p></li></ul><p>可以使用 <code>performance.getEntries()</code> 获取已经加载成功的资源 与要加载的资源进行对比 得到没有加载成功的资源</p><p>vue 中用 errorHandler react 中用 componentDidCatch</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// source(文件), lineno(行), colno(列)</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token comment">// 返回false(默认) 就在浏览器显示错误； 返回 true 不显示错误了 只打印上面的输出，如果没有写输出  就看不到错误信息</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// a是没有定义的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>unhandledrejection</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledrejection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 产生了reject  但是没有设置 catch 捕获</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">23333</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 方式一 */</span>
<span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;myEvent&quot;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;myEvent&quot;</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>myEvent<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Event&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 方式二 */</span>
<span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&quot;myEvent&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;CustomEvent&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;myEvent&quot;</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>myEvent<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件说明" tabindex="-1"><a class="header-anchor" href="#事件说明" aria-hidden="true">#</a> 事件说明</h3><ul><li><p>onchange: 值有改变并且元素失去焦点时触发。</p></li><li><p>onblur: 只要失去焦点就触发。</p></li><li><p>支持 onload 的标签 <code>&lt; body&gt;, &lt; frame&gt;, &lt; frameset&gt;, &lt; iframe&gt;, &lt; img&gt;, &lt; input type=&quot;image&quot;&gt;, &lt; link&gt;, &lt; script&gt;, &lt; style&gt;</code></p></li><li><p>onscroll 事件 对div window都兼容; document，document.body, document.documentElement 存在兼容问题 http://www.w3help.org/zh-cn/causes/SD9013 监听了window后可以获取html的 scrollTop</p></li><li><p><code>&#39;&lt;div onclick=&quot;fn(\\&#39;&#39;+ param +&#39;\\&#39;)&quot;&gt;&lt;/div&gt;&#39;</code> 内联事件传字符串需加引号并转义</p></li><li><p>storage 同一个域名不同页面才有效,其中的一个页面改变sessionStorage或localStorage的数据时，其他所有页面的storage事件会被触发，当前页不触发</p></li></ul><h3 id="事件移除" tabindex="-1"><a class="header-anchor" href="#事件移除" aria-hidden="true">#</a> 事件移除</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>fn<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 这里必须写成fn的函数调用，因为要与添加事件时的函数为同一个函数。  </span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>  
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">&#39;事件名称&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数可选</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js鼠标事件获取坐标" tabindex="-1"><a class="header-anchor" href="#js鼠标事件获取坐标" aria-hidden="true">#</a> JS鼠标事件获取坐标</h3>`,20),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent",target:"_blank",rel:"noopener noreferrer"},d=s(`<ul><li><p>clientX/Y: 触发点相对浏览器可视区域左上角距离，不随页面滚动而改变;浏览器都支持;</p></li><li><p>pageX/Y: 触发点相对文档区域左上角距离，不会随着页面滚动而改变,除IE6/7/8不支持外，其余浏览器均支持;</p></li><li><p>offsetX/Y,layerX/Y 点击位置相对于元素的内边距</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>内有其它元素,获取的 offsetX 值会被影响，处理方法是设置一个透明遮罩覆盖在顶部
firefox的event不支持 offsetX (新版的是支持的)属性，但是提供了layerX(相对于元素的外边距),如果设置了position为相对/绝对定位就相等。
IE所有版本，chrome，Safari均完美支持，Firefox不支持最新版支持
IE6/7/8不支持，opera不支持，IE9/10和Chrome、Safari均支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>screenX/Y 触发点相对显示器屏幕左上角的距离，不随页面滚动而改变 所有浏览器均支持;<br> Event.x/y相对于css中的绝对定位的位置，不会随滚动条的改变而改变。火狐不支持但有等效的pageX。</li></ul>`,3);function k(v,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[c("参考地址"),i(a)])]),d])}const g=t(l,[["render",k],["__file","jsEvent.html.vue"]]);export{g as default};

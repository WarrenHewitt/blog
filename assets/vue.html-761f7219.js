import{_ as c,M as o,p as i,q as u,R as n,N as a,V as e,t as s,a1 as p}from"./framework-7e1a102e.js";const r={},d={class:"table-of-contents"},k=p(`<p>[toc]</p><h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h1><ul><li>在每个 new Vue 实例的子组件中，其根实例可以通过 $root 属性进行访问</li></ul><p>全局挂载事件 <code>this.$root.$on(&#39;eventName&#39;, () =&gt; {}) this.$root.$emit(&#39;eventName&#39;) </code></p><p>移除自定义事件监听器 <code>this.$root.$off(&#39;eventName&#39;)</code></p><p>vue3 实际已经禁止使用这个了 https://v3.vuejs.org/guide/migration/events-api.html</p><h2 id="vue-2" tabindex="-1"><a class="header-anchor" href="#vue-2" aria-hidden="true">#</a> vue-2</h2><ul><li><p><code>__ob__: Observer</code> vue设置的数据监听器，一般不可枚举</p></li><li><p>重置数据到初始化状态</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 只能用assign 否者会报错 Use nested data properties instead */</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">/* 当data数据中有用到 this.props this.methods中的方法 需要重新绑定 this; 因为这些属性没有挂载在$options上，所以直接赋值会是undefined*/</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>Vue.component(id, 组件对象)</code> 注册或获取全局组件</p></li><li><p>虚拟 DOM</p><ol><li>需要适配上层 API 对 dom 的操作，所以需要具有普适性，所以不是最优性能实现，但是比所有的都直接操作DOM要更好，保障了性能的下限</li><li>跨平台，因为本质是js对象，，可以做服务端渲染 weex 等</li><li>有些高性能应用中，无法极致优化，比如vscode手动操作DOM进行的性能优化</li></ol></li></ul><h3 id="自定义组件用-v-model" tabindex="-1"><a class="header-anchor" href="#自定义组件用-v-model" aria-hidden="true">#</a> 自定义组件用 v-model</h3><p>参考 base-dialog</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  // 等价于下面方式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> // 语法糖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后面为了满足非输入元素（也就是自定义组件）父子通信有了如下方式</p><p>父组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ChildComponent v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;select&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ChildComponent<span class="token operator">&gt;</span>

<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">select</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件：()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;sel&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 与下面 props 中的 sel 一致 </span>
    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;eventName&#39;</span> <span class="token comment">// 用于 this.$emit(&#39;eventName&#39;, &#39;参数&#39;) 触发</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// v-model 默认子组件接收就是用的 value  事件触发用的 this.$emit(&#39;input&#39;, &#39;参数&#39;)；如果要换其它名称就用上面的方式</span>
    <span class="token literal-property property">sel</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token comment">// 用于接收父组件 v-model 中的值</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h3><p>computed 不能传参</p><p>默认只有getter</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">testComputed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token comment">// name变动时调用 getter</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token function">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> v
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>testComputed <span class="token operator">=</span> <span class="token string">&#39;new name&#39;</span> <span class="token comment">// 触发setter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;fn(&#39;some string&#39;, $event)&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token comment">// 如果这里 fn 没有参数传递  那么在 method 中的 fn 默认第一个参数为 even </span>

<span class="token comment">// 获取 原始 DOM 事件</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件中，可以用 $on,$once 监听所有的生命周期钩子函数，如监听组件的 destroyed 钩子函数可以写成 <code>this.$on(&#39;hook:destroyed&#39;, () =&gt; {})</code> 其他周期函数同理</p><p>父组件监听子组件生命周期函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式一</span>
<span class="token comment">// 父组件</span>
<span class="token operator">&lt;</span>SomeCustomComponent @created<span class="token operator">=</span><span class="token string">&quot;someFn&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token comment">// 子组件</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方式二</span>
@hook<span class="token operator">:</span>created 监听组件的 created 生命钩子函数 同理 其它周期函数也可以这样 监听
<span class="token operator">&lt;</span>SomeCustomComponent @hook<span class="token operator">:</span>created<span class="token operator">=</span><span class="token string">&quot;someFn&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h4><ol><li><p>自定义事件名，会被转换为全小写；camelCase 或 PascalCase 与 kebab-case，永远不会相同；推荐使用 kebab-case 命名</p></li><li><p><code>定义的组件</code> 如果要使用原生事件(click等) 需要加上 <code>.native</code>;</p></li></ol><h3 id="watch-处理" tabindex="-1"><a class="header-anchor" href="#watch-处理" aria-hidden="true">#</a> watch 处理</h3>`,30),v={href:"https://cn.vuejs.org/v2/api/#watch",target:"_blank",rel:"noopener noreferrer"},m=p(`<ul><li>immediate: 表示初始化监听时，立即触发一次，从而不必在 created 等钩子函数中去获取第一次传入的 prop 值</li><li>deep: 当监听的是对象时，并且父组件只是修改了对象某个属性值，并没有修改引用地址，则需要设置deep进行监听，当修改了对象引用，则不需要</li></ul><hr><ul><li><p>无论何时，绑定的数据对象上 message 属性发生了改变，插值处的内容都会更新;通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。</p></li><li><p>过滤器函数总接受表达式的值作为第一个参数。</p></li><li><p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。</p></li><li><p>Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。</p></li><li><p>然而，不同的是计算属性是基于它们的依赖进行缓存的，计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p></li><li><p><code>v-if v-show</code> 说明</p><ul><li>v-else 元素必须紧跟在 v-if 或者 v-else-if 元素的后面——否则它将不会被识别</li><li>v-if 条件块内的事件监听器和子组件适当地被销毁和重建</li><li>v-show 元素总是会被渲染，并且只是简单地基于 CSS 进行切换</li><li>elementUI 的 dialog 使用的是 v-show</li></ul></li><li><p>v-model后不能跟表达式</p></li></ul><hr><ul><li><code>v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;</code></li></ul><p><code>$attrs：</code> 包含了父作用域中 不作为 prop 被识别和获取的属性,在<strong>孙一级</strong>中定义prop获取或者不设置prop，直接用this.$attrs获取,两者只能选其一(使用示例参考 vue-admin componentCommunicate)</p><p><code>$listeners：</code> 包含了父作用域中传入的 v-on 事件监听器，除了原生事件，可以是 click 等事件也可以是自定义事件，可以 this.$listeners.click() this.$emit(&#39;click&#39;) 两种方式调用(使用示例参考 vue-admin componentCommunicate)</p><p>可用于透传参数，比如二次封装某些第三方组件时，<code>&lt;el-upload v-bind=&quot;$attrs&quot;&gt;</code> 那自己封装的组件就可以直接设置 第三方的组件属性</p><hr><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ul><li>created 非相应式的data数据可以赋初始值 <code>data: { a: {} }; this.a.b=1</code></li><li>destroyed ： 如果有定时器，在该钩子函数中务必清除</li></ul><p>参考： https://www.jianshu.com/p/a20f2023c78a</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>beforeCreate：在实例初始化之后，data observer 和 event/watcher事件配置之前被调用，此时data、watcher、methods没有。
vue实例什么都没有，但$route对象是存在的，可以根据路由信息进行重定向之类的操作。

created：在实例已经创建完成之后被调用。在这一步，实例已完成以下配置：数据观测(data observer) ，属性和方法的运算， watch/event 事件回调。挂载阶段还没开始，$el属性目前不可见。
此时 this.$data 可以访问，watcher、events、methods也出现了，若根据后台接口动态改变data和methods的场景下，可以使用。

beforeMount：在挂载开始之前被调用，相关的 render 函数 首次被调用。但是render正在执行中，此时DOM还是无法操作的。此时的vue实例对象，相比于created生命周期，此时只是多了一个$el的属性，但其值为undefined。
页面渲染时所需要的数据，应尽量在这之前完成赋值。

mounted：在挂载之后被调用。在这一步 创建vm.$el并替换el，并挂载到实例上；此时元素已经渲染完成了

beforeUpdate：$vm.data更新之后，虚拟DOM重新渲染 和打补丁之前被调用。
你可以在这个钩子中进一步地修改$vm.data，这不会触发附加的重渲染过程。

updated：虚拟DOM重新渲染 和打补丁之后被调用。
当这个钩子被调用时，组件DOM的data已经更新，所以你现在可以执行依赖于DOM的操作。但是不要在此时修改data，否则会继续触发beforeUpdate、updated这两个生命周期，进入死循环！

beforeDestroy：实例被销毁之前调用。在这一步，实例仍然完全可用。

destroyed：Vue实例销毁后调用。此时，Vue实例指示的所有东西已经解绑定，所有的事件监听器都已经被移除，所有的子实例也已经被销毁。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> mixin</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> mixIn <span class="token keyword">from</span> <span class="token string">&#39;mixin.js&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>mixIn<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>data对象的数据会进行递归合并，并在发生冲突时以组件数据优先</p></li><li><p>同名钩子函数将合并为一个数组，都将被调用。混入对象的钩子将在组件自身钩子之前调用</p></li><li><p>值为对象的选项，例如 methods、computed、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p></li><li><p>可以将一些公共方法，比如获取store中数据，放入mixin中，抽取成公共的mixin使用</p></li></ul><h3 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h3><p><code>https://v2.cn.vuejs.org/v2/guide/filters.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在双花括号中 --&gt;</span>
{{ message | capitalize }}
<span class="token comment">&lt;!-- 在 \`v-bind\` 中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawId | formatId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props：</h3>`,20),b=n("li",null,[n("p",null,"同步且不变，可以直接在created等钩子函数直接获取值，而不是得到子组件设置的默认 porp 值；")],-1),g=n("li",null,[n("p",null,"异步，只能在watch中监听prop，从而获取值")],-1),h=n("li",null,[n("p",null,"当子组件中需要修改当前的prop时，可以利用watch监听其变化，在data中设置一个新的变量，以供子组件修改赋值")],-1),f=n("li",null,[n("p",null,"修改props 两种方式"),n("ul",null,[n("li",null,"通过 $emit 回掉父组件的函数修改"),n("li",null,"通过 .sync 修饰符方式 (父子组件是时刻也是必须保持一致)")])],-1),y=n("code",null,".sync",-1),q={href:"https://v2.cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 相当于对下面的代码进行语法糖，利用prop传递值给子组件 子组件通过emit修改父组件的数据 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>someValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span><span class="token namespace">update:</span>count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sValue = $event<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实际用法示例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ sValue }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 这里的值也会跟着一起修改 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">:someValue.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sValue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    data () {
        return { sValue: 1 }
    }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Parent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ChildComponent 组件中 </span>
<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">someValue</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">someClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 执行后 父组件的 sValue 值会改变 */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:someValue&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 这里的update:someValue 必须与父组件定义的 prop 名称一致</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插槽-slot" tabindex="-1"><a class="header-anchor" href="#插槽-slot" aria-hidden="true">#</a> 插槽 slot</h3><ul><li><p>v-slot:name 简写 #name</p></li><li><p><code>&lt;slot&gt;这里的内容是默认内容，当父级有内容传入时，将会被替换&lt;/slot&gt;</code></p></li><li><p>作用域插槽：</p><ul><li>让父组件可以使用子组件插槽绑定的数据</li><li>v-slot 只能添加在 <code>&lt;template&gt; </code>上</li></ul></li><li><p>v-slot:default 设置了后，如果使用非具名 slot 接收父组件传递的默认文本，不会被渲染到 slot 中 反而会将绑定了 v-slot:default 的template多渲染一次</p></li></ul><h4 id="定义-slot-组件" tabindex="-1"><a class="header-anchor" href="#定义-slot-组件" aria-hidden="true">#</a> 定义 slot 组件</h4><p>主要操作：</p><ol><li>设置插槽名称</li><li>绑定作用域插槽数据</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">&gt;</span></span>这是默认接收<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>data1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这是默认作用域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 具名插槽 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 作用域插槽：让父级可以使用子插槽组件中的数据 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scopedSlotData1<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>data1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {{ data1 }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scopedSlot<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>data1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data1<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>data2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {{ data1.name }}{{ data1.name }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token literal-property property">data1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;warren1&#39;</span> <span class="token punctuation">}</span> data2<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;warren2&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引用-slot" tabindex="-1"><a class="header-anchor" href="#引用-slot" aria-hidden="true">#</a> 引用 slot</h4><p>为<strong>具名插槽</strong>和<strong>作用域插槽</strong>引入了一个新的统一的语法 (即 v-slot 指令)</p><p>主要操作：</p><ol><li>使用哪个插槽</li><li>是否使用子组件的数据</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MySlot</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 使用具名插槽 v-slot:name 简写 #name --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>name</span><span class="token punctuation">&gt;</span></span>new name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

            <span class="token comment">&lt;!-- 作用域插槽简写 v-slot:default=&quot;data&quot; 等同于 v-slot=&quot;data&quot;  --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                {{ data }}
                <span class="token comment">&lt;!-- 这里显示显示 { data1: { name: &#39;warren1&#39; } } 没有具名的slot (即上面定义的第二个slot)--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>scopedSlotData1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                {{ data }}
                <span class="token comment">&lt;!-- 这里显示显示 { data1: { name: &#39;warren1&#39; } } --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>scopedSlot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!-- 这里的 data  可以修改为任意名称 --&gt;</span>
                <span class="token comment">&lt;!-- 下面的 {{}} 将会被替换为 { &quot;data1&quot;: { &quot;name&quot;: &quot;warren1&quot; }, &quot;data2&quot;: { &quot;name&quot;: &quot;warren2&quot; } } --&gt;</span>
                ：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>{{ data }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MySlot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> MySlot <span class="token keyword">from</span> <span class="token string">&#39;./mySlot.vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> MySlot <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-test-utils" tabindex="-1"><a class="header-anchor" href="#vue-test-utils" aria-hidden="true">#</a> Vue Test Utils</h2><p>https://vue-test-utils.vuejs.org/zh/</p><p>mocha：对测试过程进行描述 (语句中的describe和it等方法)</p><p>chai：断言库，即各种判断(expect方法)</p><p>Karma: 一个启动浏览器运行测试并生成报告的测试运行器</p><p>sinon: 模拟与其它系统或函数对接，主要有三个方法 spy stub mock</p><p>cypress: Fast, easy and reliable testing for anything that runs in a browser.</p><h2 id="vue-loader" tabindex="-1"><a class="header-anchor" href="#vue-loader" aria-hidden="true">#</a> vue-loader</h2><ul><li><p>在style中用别名引入scss文件时，如果报错，在别名前 <code>~ ：~@/asset/xxx</code> 在scss中@是变量定义的前缀，所以需要加上~以示区分</p></li><li><p>独立的 .scss 文件中引入图片，图片的相对地址是根据，引入该样式的 vue 文件的相对地址决定的</p></li><li><p><code>@import &#39;@/x/x/x.scss&#39;</code>; 引用文件时，不加后缀名可能导致编译错误</p></li><li><p>深度作用域</p></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>.a &gt;&gt;&gt; .b <span class="token punctuation">(</span>实际使用中效果没有deep好<span class="token punctuation">)</span>
.a /deep/ .b  <span class="token punctuation">(</span>容易报错<span class="token punctuation">)</span>
.<span class="token property">a</span> <span class="token punctuation">:</span><span class="token punctuation">:</span>v-deep .b  <span class="token punctuation">(</span>最新版，vue/cli 4.4.1<span class="token punctuation">,</span>只有这个有效<span class="token punctuation">)</span>

.<span class="token property">parent</span> <span class="token punctuation">:</span><span class="token function">deep</span><span class="token punctuation">(</span>.need<span class="token punctuation">)</span>  vue3 用法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深入响应式原理" tabindex="-1"><a class="header-anchor" href="#深入响应式原理" aria-hidden="true">#</a> 深入响应式原理</h2><ul><li>非侵入性的响应式系统</li><li>数据模型为js对象，对其修改时，视图更新</li></ul><h3 id="如何追踪变化" tabindex="-1"><a class="header-anchor" href="#如何追踪变化" aria-hidden="true">#</a> 如何追踪变化</h3><ul><li><p>vue将接收的data全部用Object.defineProperty把属性转为getter/setter(导致不支持ie8以及一下)</p></li><li><p>属性被访问和修改时通知变化</p></li><li><p>每个组件实例都有对应的watcher实例对象（它会在组件渲染的过程中把属性记录为依赖，当依赖的setter被调用时，会通知watcher重新计算，从而使相关组件更新）</p></li></ul><h3 id="检测变化的注意事项" tabindex="-1"><a class="header-anchor" href="#检测变化的注意事项" aria-hidden="true">#</a> 检测变化的注意事项</h3><ul><li><p>只有在data对象上的属性才是响应式的</p></li><li><p>改变对象和数组的一些情况不会被检测到更新</p></li><li><p>要用到的状态，提前在data对象中声明</p></li></ul><h3 id="异步更新队列" tabindex="-1"><a class="header-anchor" href="#异步更新队列" aria-hidden="true">#</a> 异步更新队列</h3><h2 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> vue router</h2><p>路由的加载，管理，匹配都是 vueRouter 创建的实例属性 router.matcher 处理</p><p>vueRouter 的两个方法 match addRouter 都是 matcher 暴露的方法</p><p><code>$route.matched()</code> 匹配当前页面路由所在的层级 比如地址是 /a/b/c b是a的child一级 c是b的child一级 那匹配的就是 a 和 a/b 和 a/b/c 的路由信息</p><ul><li><p>beforeRouteUpdate 处理使用同一个组件页面 但是路由参数变化的情况 /:id 或 /?id=1</p></li><li><p>相关的路由钩子函数，必须只能在路由上挂载的组件中才有效，内部其它组件中无效</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">/* 这里的键名必须是 routes */</span>
    <span class="token literal-property property">routes</span><span class="token operator">:</span> baseRouter
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>router-view 与路由表中的 children 有关</p></li><li><p>router.push 改为了 Promise</p></li><li><p>参数传递：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* params 针对的是 定义的path形如 /xx/xx/:id   */</span>
<span class="token comment">// 注意如果 path是 /xx/xx/ 的话，刷新页面  传递的数据会掉</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// path 和 params 同时设置 将无效, 实际使用时  { path: &#39;/user:is&#39;, params: { id: &#39;123&#39; }} 看起来path也很怪异</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// name 和 path 都可以和 query 一起用  </span>
<span class="token comment">// 定义的路由 path: &#39;/user&#39; 以下两种方式跳转后url都是： /user?id=123</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导航守卫的钩子中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 进行管道中的下一个钩子</span>
<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航</span>
<span class="token comment">// 以上两个的区别，前者表示，路由完成，显示对应页面；后者表示，需要开启一个新的路由过程，与跳转路由相似</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive" aria-hidden="true">#</a> keep-alive</h3><ol><li>include 名称匹配的组件会被缓存，包含的是组件的name属性值</li><li>通过同一个 router-view 进入的路由间切换, keep-alive 都有效,都会缓存页面</li><li>只要通过keep-alive下的路由(前提是要包含在include中) ，每次都会触发activated, 只有第一次进入会触发mounted（切换过router-view入口 再进入也会触发mounted）</li><li>注意 include 如果用字符串值，后面名称与逗号之间不要有空格</li><li>exclude 优先级更高</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** 这里主要是重置数据，当要去往的地址是新增、编辑、详情这些时，即可以不用重置数据 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;routeName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token string">&#39;数据重置了&#39;</span> <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token function">activated</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token doc-comment comment">/** <span class="token keyword">@des</span> 这里更新表格数据等 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token doc-comment comment">/** 这里请求不需要频繁更新的数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理保存页面状态" tabindex="-1"><a class="header-anchor" href="#处理保存页面状态" aria-hidden="true">#</a> 处理保存页面状态</h3><ul><li>最好一个模块有一个单独的 router-view</li><li>在 activated 中请求需要实时更新的数据</li><li>在 beforeRouteLeave 中处理和当前需要保存状态页面走同一个 router-view 的页面，否则在这些页面间切换，页面的状态也会被保留（data中的数据）</li></ul><h2 id="使用-dart-sass" tabindex="-1"><a class="header-anchor" href="#使用-dart-sass" aria-hidden="true">#</a> 使用 dart-sass</h2><p>替换 node-sass； 安装 <code>dart-sass sass sass-loader</code> 启动后，如果报错 <code>this.getOptions is not a function</code> 将 sass-loader版本改为10.1.1 <code>(/deep/ 和 &gt;&gt;&gt;)</code> 替换为 <code>::v-deep</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
<span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">sass</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">implementation</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;sass&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h2>`,51),w={href:"https://pinia.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[n("p",null,[s("实践使用参见 "),n("code",null,"vue-admin/src/store")])],-1),j=n("li",null,[n("p",null,[n("code",null," vuex esm. js sub is not function"),s(" 报错 是vue浏览器插件问题，重启或关闭，升级可以解决")])],-1),$=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// state</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapstate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 模块内的状态已经是嵌套的了，使用 \`namespaced\` 属性不会对其产生影响</span>
    <span class="token comment">// ...mapgetters  同上</span>
<span class="token punctuation">}</span> 

<span class="token comment">// getters 返回函数 可以获取参数  第二个参数为其它 getter</span>
<span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// mutation</span>
<span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// actions</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> dispatch<span class="token punctuation">,</span> rootState <span class="token punctuation">}</span><span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> 
<span class="token comment">// rootState 返回绑定的根节点下的所有modules</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>公用数据，在组件中获取store中数据，若store中没有则等待其从服务器拉去数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">/* actionGetSomeData 中有异步数据请求 */</span>
        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">actionGetSomeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 这里调用的方法需要等待store中的数据来改变界面显示 */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethodsUpdateView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Mutation 同步操作</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用法一</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token comment">// 这里不用管是否 是提交的某个模块 commit 只要名称对应即可，所以 mutation 定义的名称要保证全局唯一</span>
<span class="token comment">// 用法二</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 将 \`this.increment()\` 映射为 \`this.$store.commit(&#39;increment&#39;, payload)\`</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span> <span class="token comment">// 将 \`this.add()\` 映射为 \`this.$store.commit(&#39;increment&#39;, payload)\`</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Action 内部包含异步操作 异步原因：</li></ul><ol><li>区分 actions 和 mutations 为了能用 devtools 追踪状态变化</li><li>当用到相同的数据时，如果采用【异步获取数据+mutation】模式，会造成在很多地方写重复代码，就可以抽取到action中统一管理 还能防止重复发起http请求</li></ol><p>如果用 Pinia 就没有这个问题了，它只提供了 actions</p><p>定义的action方法会被包裹一层，返回的是一个 Promise，所以触发 action 要在 then 中去接收返回值；</p><p>如果action中有数据请求，需要同步执行，必须有如下两种操作之一，推荐第二种:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 1. */</span>
<span class="token function">actionSome</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 2. */</span>
<span class="token keyword">async</span> <span class="token function">actionSome</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">requestSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>

<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token comment">// 默认情况下，模块内部的 action 和 mutation 仍然是注册在全局命名空间, 除了加命名空间， 所以注意名称全局不重复</span>
        <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 将 \`this.increment()\` 映射为 \`this.$store.dispatch(&#39;increment&#39;, payload)\`</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">&#39;模块名称&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;f1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 使用了 namespace</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;f1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 没使用 namespace</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>namespaced: true</code> 命名空间</li></ul><p>用法 <code>store.dispatch(&#39;模块名/actionSetUserInfo&#39;)</code></p><h2 id="elementui" tabindex="-1"><a class="header-anchor" href="#elementui" aria-hidden="true">#</a> elementUI</h2><ul><li><p>表单重置 <code>this.$refs.ruleForm.resetFields()</code> 只会清除 新输入的数据 ；当在data上配置表单数据时设置了初始化值时，该默认值是不会被清除的，并且修改该默认值，重置后的值也是初始值</p></li><li><p>当表单数据有多层嵌套对象时，在设置prop时要将 嵌套关系用字符串形式 赋值</p></li><li><p>初始化时给表单赋值，触发了校验，赋值后还是给出了错误提示，检查是否是在 created 生命周期中进行的赋值，如果不是请保证在 created 中进行初始化赋值</p></li><li><p>upload 组件 :accept=&quot;image/png, image/jpeg, image/jpg&quot;</p></li><li><p>v-for 中使用 ref 注意 获取 <code>this.$refs.name</code> 返回的是数组</p></li></ul><h3 id="el-cascader" tabindex="-1"><a class="header-anchor" href="#el-cascader" aria-hidden="true">#</a> el-cascader</h3><ul><li><p>需要点击两次才能选中 (1) 其中一个原因是，多次赋值操作；解决办法为，保证只有在初始化时进行一次赋值操作 (2) 如果是对该组件进行了封装，且用 v-model 进行父子组件参数传递，且数据是异步，可以在 watch 监听时，判断 oldvalue 如果存在值 就不进行赋值操作，防止重复赋值 (3) 加个 <code>emitPath: false</code> 属性，便能搞定, 注意这样设置后 change事件返回的value 不是数组</p></li><li><p>解决 tooltip 文字内容过多导致显示不正常, 注意这里是全局修改，可以给一个较大的 max-width 值</p></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.el-popper.is-dark, .el-tooltip__popper.is-dark</span> <span class="token punctuation">{</span> <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw - 300px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  
<span class="token selector">.el-popper__popper.is-dark</span> <span class="token punctuation">{</span> <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw - 300px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>select change 三种方式传参 后两种是传递了当前选择的值和额外添加的参数</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- option 的value直接传对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fn($event,i)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(val) =&gt; fn(val,i)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tree" tabindex="-1"><a class="header-anchor" href="#tree" aria-hidden="true">#</a> tree</h3><ul><li>没有采用 checkbox 需要设置选中且高亮 使用 setCurrentKey</li></ul><p>有checkbox的情况 单选</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree</span>
    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>refDepTree<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>treeData<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">check-strictly</span>
    <span class="token attr-name">node-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">default-expand-all</span>
    <span class="token attr-name">highlight-current</span>
    <span class="token attr-name">:expand-on-click-node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">show-checkbox</span>
    <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ children: &#39;&#39;, label: &#39;&#39;, }<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>check<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
check (v) {
    if (v.id === this.currentSelect) {
        this.currentSelect = &#39;&#39;
    } else {
        this.$refs.refDepTree.setCheckedKeys([])
        this.$nextTick(() =&gt; {
            this.$refs.refDepTree.setCheckedKeys([v.id])
        })
        this.currentSelect = v.id
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表格" tabindex="-1"><a class="header-anchor" href="#表格" aria-hidden="true">#</a> 表格</h3><ul><li><p>表格设置 height 属性， 如果需要动态修改，初始值不能填 0 或 能够判断为 true 的值; 源码：<code>if (!el &amp;&amp; (value || value === 0)) return Vue.nextTick(() =&gt; this.setHeight(value, prop));</code></p></li><li><p>动态表格列，需要用 <code>template</code> 来包裹</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>judge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prop<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>在表格中使用 dropdown 的基础形式 也就是没有用 split-button 需要把 v-slot=&quot;scope&quot; 加上</p></li><li><p>动态表格添加项时 一定要注意把字段加上，如果表格中需要的字段，在是初始化时没有指定，在修改其值后 页面不会及时更新显示，再次操作时才会显示</p></li><li><p>表格合并 注意被合并的单元格的起始单元格设置对应的行列合并即可，其他被合并的单元格应该将行列设置为0（隐藏这些单元格） rowspan是合并的行数：为1表示不变；为0表示去除该单元格，后面的单元格会向上往这格填； colspan同理</p></li><li><p>固定列时，加了自定义滑动条，固定列和旁边列可能会出现行错位的问题 element-plus 用的scrollbar组件所以不存在该问题</p></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.el-table__fixed-body-wrapper .el-table__body</span> <span class="token punctuation">{</span>
    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token comment">/* 这里的数值和设置的滑动条高度一致 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function C(V,S){const t=o("router-link"),l=o("ExternalLinkIcon");return i(),u("div",null,[n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#vue-2"},{default:e(()=>[s("vue-2")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#自定义组件用-v-model"},{default:e(()=>[s("自定义组件用 v-model")]),_:1})]),n("li",null,[a(t,{to:"#计算属性"},{default:e(()=>[s("计算属性")]),_:1})]),n("li",null,[a(t,{to:"#事件处理"},{default:e(()=>[s("事件处理")]),_:1})]),n("li",null,[a(t,{to:"#watch-处理"},{default:e(()=>[s("watch 处理")]),_:1})]),n("li",null,[a(t,{to:"#生命周期"},{default:e(()=>[s("生命周期")]),_:1})]),n("li",null,[a(t,{to:"#mixin"},{default:e(()=>[s("mixin")]),_:1})]),n("li",null,[a(t,{to:"#过滤器"},{default:e(()=>[s("过滤器")]),_:1})]),n("li",null,[a(t,{to:"#props"},{default:e(()=>[s("props：")]),_:1})]),n("li",null,[a(t,{to:"#插槽-slot"},{default:e(()=>[s("插槽 slot")]),_:1})])])]),n("li",null,[a(t,{to:"#vue-test-utils"},{default:e(()=>[s("Vue Test Utils")]),_:1})]),n("li",null,[a(t,{to:"#vue-loader"},{default:e(()=>[s("vue-loader")]),_:1})]),n("li",null,[a(t,{to:"#深入响应式原理"},{default:e(()=>[s("深入响应式原理")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#如何追踪变化"},{default:e(()=>[s("如何追踪变化")]),_:1})]),n("li",null,[a(t,{to:"#检测变化的注意事项"},{default:e(()=>[s("检测变化的注意事项")]),_:1})]),n("li",null,[a(t,{to:"#异步更新队列"},{default:e(()=>[s("异步更新队列")]),_:1})])])]),n("li",null,[a(t,{to:"#vue-router"},{default:e(()=>[s("vue router")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#keep-alive"},{default:e(()=>[s("keep-alive")]),_:1})]),n("li",null,[a(t,{to:"#处理保存页面状态"},{default:e(()=>[s("处理保存页面状态")]),_:1})])])]),n("li",null,[a(t,{to:"#使用-dart-sass"},{default:e(()=>[s("使用 dart-sass")]),_:1})]),n("li",null,[a(t,{to:"#vuex"},{default:e(()=>[s("vuex")]),_:1})]),n("li",null,[a(t,{to:"#elementui"},{default:e(()=>[s("elementUI")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#el-cascader"},{default:e(()=>[s("el-cascader")]),_:1})]),n("li",null,[a(t,{to:"#tree"},{default:e(()=>[s("tree")]),_:1})]),n("li",null,[a(t,{to:"#表格"},{default:e(()=>[s("表格")]),_:1})])])])])]),k,n("p",null,[n("a",v,[s("文档"),a(l)])]),m,n("ul",null,[b,g,h,f,n("li",null,[n("p",null,[y,s(" 一般用于简单数据处理 复杂数据用自定义事件接收，这里只是语法糖，业务逻辑还是要根据不同情况去添加其它逻辑代码 "),n("a",q,[s("参考"),a(l)])])])]),x,n("ul",null,[n("li",null,[n("p",null,[s("vue3 官方已经推荐 "),n("a",w,[s("Pinia"),a(l)])])]),_,j]),$])}const D=c(r,[["render",C],["__file","vue.html.vue"]]);export{D as default};

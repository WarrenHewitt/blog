import{_ as l,M as o,p as i,q as u,R as n,N as a,V as p,t as s,a1 as c}from"./framework-7e1a102e.js";const r={},k={class:"table-of-contents"},d=c(`<p>[toc]</p><h2 id="常见排序算法原理及js代码实现" tabindex="-1"><a class="header-anchor" href="#常见排序算法原理及js代码实现" aria-hidden="true">#</a> 常见排序算法原理及JS代码实现</h2><p><code>创建时间：2020-08-07</code></p><p>本文只是将作者学习的过程以及算法理解进行简单的分享，提供多一个角度的理解说明，或许让你的困惑能得以解决（<strong>代码或说明若有问题，欢迎留言、联系更正！以免造成更多困惑</strong>）</p><p>如果要更深入研究这些算法的同学，社区中同类型更优秀，单个算法更深入剖析的文章也是比比皆是，<strong>这里或许作为一个常见排序算法入门学习了解更准确</strong></p><hr><table><thead><tr><th>排序名称</th><th>最快时间</th><th>最慢时间</th><th>空间复杂度</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>插入排序</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>希尔排序</td><td>O(n*log2n)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(1),O(n)</td></tr></tbody></table><p>以上时间和空间复杂度会根据算法的优化有所不同</p><hr><p>生成测试所用，包含随机十万条数据的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下标注的时间均为对该随机数组的数据排序的时间，这里的时间只是作为一个参考，因为并没有控制到只有唯一变量（每个排序算法用到的数组长度相同，但数组值不同）， 所以这里的时间只反应常规情况</p><p>运行时间的计算使用 <code>console.time()</code></p><h2 id="数组-sort-方法" tabindex="-1"><a class="header-anchor" href="#数组-sort-方法" aria-hidden="true">#</a> 数组 sort() 方法</h2>`,14),v={href:"http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/runtime/ArrayPrototype.cpp?rev=138530#L647",target:"_blank",rel:"noopener noreferrer"},m=c(`<blockquote><p>时间：≈ 75ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sortCompare</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h2><p>原理：依次比较两个相邻的元素，将较大的放到右边（升序排列）</p><p>一轮循环只找到一个最值，然后通过多次这样的循环（所以有两层嵌套循环），获得一个排序结果</p><p>以下是经过简单优化的算法实现：</p><blockquote><p>时间：≈ 21899ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bubbling</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> sorted <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">/* 每找到一个最值，需要一次循环 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 必须每轮循环前，假设是排好序后的数组，防止只需要前几次循环就排好的情况 */</span>
        sorted <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token comment">/* 这里的循环是找出当前轮的最值 */</span>
        <span class="token comment">/* len-1-i 保障 j+1 能取到，同时放到最后的数，不用参与下一轮的循环，因为它已经是上一轮找出的最值 */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
                sorted <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 如果是已经排好序了就直接退出循环，此时最优时间复杂度 O(n) */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sorted<span class="token punctuation">)</span> <span class="token keyword">break</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h2><p>原理：从<strong>剩余</strong>未排序序列中找到最小（大）元素，放置在已排序序列的末尾位置，以此循环，直到所有元素均排序完毕</p><blockquote><p>时间：≈ 6353ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 默认开始的第一个值的位置放置下一个最小值 */</span>
        <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i
        <span class="token comment">/* 查找剩余数值中的最小值，从 i + 1 开始的目的是避免与自身进行一次比较 */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                minIndex <span class="token operator">=</span> j
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 将最小值和当前位置(i)的值进行交换 */</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span>
        array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h2><p>原理： 将未排序队列中的数值，逐个与已排序队列中的数进行比较，当出现大于或小于已排序队列中的某个数时，进行插入操作</p><p>注意与选择排序的区别，选择排序是在未排序的数中找最值，然后交换位置，插入排序则是在已排序的的数中找对应的第一个相对最值</p><blockquote><p>时间：≈ 2416ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 记录当前未排序的数，该数将会和有序数列中的数进行比较 */</span>
        <span class="token keyword">let</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token comment">/* 有序数列的最后一个数（如果是从小到大排列，也就是最大的数） */</span>
        <span class="token keyword">let</span> endIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span> 
        <span class="token keyword">while</span> <span class="token punctuation">(</span>endIndex <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 将有序数列中的数，逐一与当前未排序数进行比较直到，找出比当前未排序数小的数即停止 */</span>
            array<span class="token punctuation">[</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span>
            endIndex<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 将最后一个往后移动空出来的位置赋值为，当前未排序数 */</span>
        array<span class="token punctuation">[</span>endIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序</h2><p>原理：</p><p>插入排序的一种优化</p><ol><li>设置一个增量，将数组中的数按此增量进行分组（比如增量为4，那下标为0，4，8...的数为一组）</li><li>对分组的数进行插入排序</li><li>缩小增量</li><li>重复步骤1、2、3，直到增量为1</li><li>当增量为1时，对整个数组进行一次插入排序，输出最后结果</li></ol><p>时间复杂度与增量选取有关,以下算法时间复杂度为 O(n^(3/2))</p><p><strong>非稳定排序（2个相等的数，在排序完成后，原来在前面的数还是在前面，即为稳定排序）</strong></p><blockquote><p>时间：≈ 35ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span> gap <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* 此处获取一个最大增量，增量的获取方法不固定，这里采用比较常见的方式，一定要保证最后能取到1 */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> len<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        gap <span class="token operator">=</span> gap<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 每更新一次增量就进行一次插入排序 */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>gap<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 以下逻辑与插入排序一致，当增量变为1时即完全一致 */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 这里要循环到数组最后是因为要保障当前分组中的每一个数都经过排序，所以当前分组靠前的数据会被与后面的数据进行多次排序 */</span>
            <span class="token keyword">let</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">let</span> endIndex <span class="token operator">=</span> i <span class="token operator">-</span> gap
            <span class="token keyword">while</span><span class="token punctuation">(</span>endIndex<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                array<span class="token punctuation">[</span>endIndex <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span>
                endIndex <span class="token operator">-=</span> gap
            <span class="token punctuation">}</span>
            array<span class="token punctuation">[</span>endIndex<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> current
        <span class="token punctuation">}</span>
        gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分治法：把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并</strong></p><h2 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序" aria-hidden="true">#</a> 归并排序</h2><p>原理：将当前数组，递归分组，比较大小后再一 一合并分组，是采用分治法的一个应用</p><ol><li>获取一个中间位置的值，然后以该位置为中心点分组</li><li>递归进行分组</li><li>比较当前两个分组，将其合并为一个数组</li></ol><blockquote><p>时间：≈ 1170ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> array
    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
    
    <span class="token comment">/* 取中间值进行分组 */</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>

    <span class="token comment">/* 递归分组 */</span>
    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">/* 两个分组都有值时，逐个进行比较 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 只有一个分组时，表明其全部为最大值，直接全部放入结果数组即可 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>left<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h2><p>分为大顶堆（子节点都小于父节点），小顶堆（子节点都大于父节点）</p><p>原理：</p><ol><li>根据给定的数据创建堆</li><li>将堆顶和堆尾互换，将堆长度减1</li><li>递归步骤1、2</li></ol><blockquote><p>时间：≈ 46ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length
    <span class="token comment">/* 第一个非叶子节点（叶子节点：没有子节点的节点）： n/2 -1 */</span>
    <span class="token comment">/* 为什么从这个点开始，也是因为这是最后一个拥有子节点的父节点，其可能会发生父子节点交换 */</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token comment">/* 第一步先将数组构建为堆 这里是大顶堆 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> node<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">maxHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 第二步 将堆顶元素与堆尾元素交换 再将前 (n-1) 个数重复构建堆 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
        length<span class="token operator">--</span>
        <span class="token comment">/* 这里相当于把第一个叶子节点改变了，所以下面从 0 开始, 当前堆的堆尾前一个数为结束 重新构建堆 */</span>
        <span class="token function">maxHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> array
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">maxHeap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 左子节点 */</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token comment">/* 右子节点 */</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token comment">/* 父节点 */</span>
    <span class="token keyword">let</span> parent <span class="token operator">=</span> i

    <span class="token comment">/* 找出子节点中比父节点大的数进行交换 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> left
    <span class="token punctuation">}</span>

    <span class="token comment">/* 这里两个条件都触发也没有关系，只要保障，一个比父节点大的子节点被移上去即可 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> right
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>parent <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>i<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        <span class="token comment">/* 表示有数据移动，所以要重排一下数据移动后,所影响到的父子节点,也就是此时的 parent 节点和其子节点 */</span>
        <span class="token function">maxHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><p>原理：</p><ol><li>在数组中找一个基准</li><li>数组中的数与该基准相比较，比它小的放在其前面，比它大的放在其后面（分区操作）</li><li>再递归的去操作基准前、后的分区</li></ol><ul><li>方式一： 需要 O(n) 的额外存储空间，和归并排序一样</li></ul><p>但是代码更清晰的体现快排的思想</p><blockquote><p>时间：≈ 77ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token keyword">const</span> pivot <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式二：</li></ul><p>原地排序</p><blockquote><p>时间： ≈ 34ms</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pivotIndex <span class="token operator">=</span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivotIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> pivotIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pivotValue <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">/* 右边大于基准的数据不需要移动位置 */</span>
        <span class="token comment">/* 这里或下面的循环，一定要确保有一处把相等的情况包含在内 */</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivotValue <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 将右边第一个扫描到的小于基准的数据移动到左边的空位 */</span>
        array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span>

        <span class="token comment">/* 左边小于基准的数据不需要移动位置 */</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivotValue <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            left<span class="token operator">++</span>
        <span class="token punctuation">}</span>
        array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 这里right和left 相等了 */</span>
    array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> pivotValue

    <span class="token keyword">return</span> right
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些更好的优化，比如基准数的选取，避免最坏时间复杂度情况的发生，可自行探索</p><hr><p>总结：</p><p>在实际项目中可能直接用到这些算法就能解决掉业务需求的情况并不多，甚至直接用 <code>Array.sort()</code> 也能解决。</p><p>但是业务需求千变万化，多种多样，总有需要你从底层去更改、优化、变异算法的情况，此时就需要用你理解的这些基本算法的原理来快速解决业务问题。</p><p>最后祝大家数据结构某几个章节复习顺利！</p>`,54),b={href:"https://github.com/WarrenHewitt/blog/issues",target:"_blank",rel:"noopener noreferrer"};function y(h,f){const t=o("router-link"),e=o("ExternalLinkIcon");return i(),u("div",null,[n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#常见排序算法原理及js代码实现"},{default:p(()=>[s("常见排序算法原理及JS代码实现")]),_:1})]),n("li",null,[a(t,{to:"#数组-sort-方法"},{default:p(()=>[s("数组 sort() 方法")]),_:1})]),n("li",null,[a(t,{to:"#冒泡排序"},{default:p(()=>[s("冒泡排序")]),_:1})]),n("li",null,[a(t,{to:"#选择排序"},{default:p(()=>[s("选择排序")]),_:1})]),n("li",null,[a(t,{to:"#插入排序"},{default:p(()=>[s("插入排序")]),_:1})]),n("li",null,[a(t,{to:"#希尔排序"},{default:p(()=>[s("希尔排序")]),_:1})]),n("li",null,[a(t,{to:"#归并排序"},{default:p(()=>[s("归并排序")]),_:1})]),n("li",null,[a(t,{to:"#堆排序"},{default:p(()=>[s("堆排序")]),_:1})]),n("li",null,[a(t,{to:"#快速排序"},{default:p(()=>[s("快速排序")]),_:1})])])]),d,n("p",null,[s("实现也是基于快排做了很多的优化算法，以保障各种情况都能稳定较快的实现排序 "),n("a",v,[s("查看C++实现源码"),a(e)])]),m,n("blockquote",null,[n("p",null,[s("欢迎交流 "),n("a",b,[s("Github"),a(e)])])])])}const w=l(r,[["render",y],["__file","sort.html.vue"]]);export{w as default};

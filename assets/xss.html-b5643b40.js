import{_ as s,p as n,q as a,a1 as e}from"./framework-7e1a102e.js";const t={},p=e(`<h1 id="xss-cross-site-scripting-跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#xss-cross-site-scripting-跨站脚本攻击" aria-hidden="true">#</a> XSS(cross-site scripting) 跨站脚本攻击</h1><p>为了和 CSS 区分，这里把攻击的第一个字母改成了 X</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><ol><li>属性值拼接</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">&quot;&gt;&lt;script&gt;console.log(&#39;xss&#39;);&lt;/script&gt;&quot;</span>
<span class="token comment">// 会执行console 不能直接复制到浏览器测试  会报错，要用输入的方式</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;xss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>&quot;<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>css攻击</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 如果想用 @import  js 代码攻击  根据 w3c 规范 可以发起请求获取 js文件 但是问价不会执行 */</span>
<span class="token selector">input[type=password][value=&#39;1&#39;]</span> <span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>xxx.com<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">input[type=password]:valid</span> <span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token comment">/* 经过多个css选择器匹配 就大概知道密码组合 */</span>

<span class="token comment">/* 这里会根据上面匹配到的 value=1 然后就会去请求 xxx.com ; valid 和 pattern 是动态的匹配 输入框内容 */</span>
&lt;input type=<span class="token string">&quot;password&quot;</span> placeholder=<span class="token string">&quot;input&quot;</span> value=<span class="token string">&quot;1&quot;</span> pattern=<span class="token string">&quot;^a&quot;</span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="攻击分类" tabindex="-1"><a class="header-anchor" href="#攻击分类" aria-hidden="true">#</a> 攻击分类</h2><h3 id="dom型" tabindex="-1"><a class="header-anchor" href="#dom型" aria-hidden="true">#</a> DOM型</h3><p>构造恶意的 url -&gt; 用户打开 url -&gt; 浏览器收到响应，开始解析，js 取出 url 中的恶意代码并执行 -&gt; 窃取用户的信息，或者攻击网站接口等</p><p>属于前端安全漏洞</p><h3 id="存储型" tabindex="-1"><a class="header-anchor" href="#存储型" aria-hidden="true">#</a> 存储型</h3><p>攻击者将代码提交到目标网站的数据库中，像论坛这些，其他用户打开网站后，服务器将代码发送到页面，在浏览器端窃取用户信息发送到第三方</p><h3 id="反射型" tabindex="-1"><a class="header-anchor" href="#反射型" aria-hidden="true">#</a> 反射型</h3><p>构造出特殊 url（用户搜索的输入参数） 用户打开这个 url ，服务器将 url 中的代码拼接在html中返回，以此来获取用户信息</p><p>与存储型的区别在于，反射型是恶意代码存 url 里</p><h2 id="常见的注入方法" tabindex="-1"><a class="header-anchor" href="#常见的注入方法" aria-hidden="true">#</a> 常见的注入方法：</h2><ol><li>HTML 中内嵌的文本中，恶意内容以 script 标签形成注入</li><li>内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）</li><li>标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签</li><li>标签的 href、src 等属性中，包含 javascript: 等可执行代码</li><li>onload、onerror、onclick 等事件中，注入不受控制代码</li><li>style 属性和标签中，包含类似 background-image:url(&quot;javascript:...&quot;); 的代码（新版本浏览器已经可以防范）</li><li>style 属性和标签中，包含类似 expression(...) 的 CSS 表达式代码（新版本浏览器已经可以防范）</li></ol><h2 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h2><ol><li>输入过滤 首先输入过滤并非十分可靠，如果转码，转码后，内容必须要确定使用在何处，否则显示时为转码 有可能出现乱码，比如 escapeHTML 转码的字符如果直接是放入到html 是没有问题的是可以直接显示的，但是放到 js 的变量赋值中 就可能会报错；但是对于明确的输入类型，还是非常有必要的，比如数字 url 电话等校验</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 两个第三方库</span>
<span class="token comment">// 1. xss https://github.com/leizongmin/js-xss/blob/master/README.zh.md</span>
<span class="token function">xss</span><span class="token punctuation">(</span><span class="token string">&#39;用户输入值&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 会将有问题的输入转义</span>
<span class="token comment">// 自定义白名单 其它的属性删除  stripIgnoreTagBody</span>
<span class="token punctuation">{</span>
  <span class="token comment">// whiteList: {}, // 指定白名单,如果要在默认的基础上添加一些其它的标签(如自定义标签)可以用 ，xss.whiteList 拿到默认的，再添加</span>

  <span class="token comment">// 去掉不在白名单上的标签</span>
  <span class="token comment">// 双 script 标签被过滤，标签内容留下</span>
  <span class="token comment">// 常规校验就开这个即可</span>
  <span class="token literal-property property">stripIgnoreTag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

  <span class="token comment">// 双 script 标签及其内容会被全部过滤掉</span>
  <span class="token comment">// 单(注意单标签) script 标签会被替换为 [removed]  其它标签不会</span>
  <span class="token comment">// stripIgnoreTagBody: [&#39;script&#39;],</span>
  <span class="token comment">// onIgnoreTag (tag, html, options) {</span>
  <span class="token comment">//     console.log(tag)</span>
  <span class="token comment">// },</span>
  <span class="token function">escapeHtml</span> <span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 被识别为有风险的标签字符串才会进入该方法，比如不在白名单里面的标签</span>
    <span class="token comment">// 标签中的内容 也会进入 这里进入检测</span>
    <span class="token comment">// 有些情况 &lt;script&gt; 这种，默认是转义为  &amp;lt;script&amp;gt; 所以采用下面方式复写</span>
    <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 2. DOMPurify  https://github.com/cure53/DOMPurify 返回一个去除恶意代码后的字符串</span>
DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;img src=x onerror=alert(1)//&gt;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 返回 &lt;img src=&quot;x&quot;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>插入html时采用 .innerText .setAttribute .style 等明确方法 使用 .innerHTML、.outerHTML、document.write() 这种较为危险的方式，注意检测</p></li><li><p>注意以下情况中出现的恶意代码</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;恶意代码&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;恶意代码&#39;</span><span class="token operator">&gt;</span>xx<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>img onclick<span class="token operator">=</span><span class="token string">&#39;恶意代码&#39;</span> onerror<span class="token operator">=</span><span class="token string">&#39;恶意代码&#39;</span> src<span class="token operator">=</span><span class="token string">&#39;恶意代码&#39;</span><span class="token operator">&gt;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">&#39;恶意代码&#39;</span><span class="token punctuation">)</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">&#39;恶意代码&#39;</span><span class="token punctuation">)</span>
location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;恶意代码&#39;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>严格的 CPS 策略 参加下方</p></li><li><p>输入内容长度的控制，根据业务限制，控制输入内容的长度，可一定程度上限制xss攻击</p></li><li><p>cookit 设置 Secure; HttpOnly 防止窃取 关键的 cookie 数据</p></li><li><p>验证码</p></li><li><p>尽量不要使用 <code>onclick=&quot;data&quot;</code> 这种形式的数据绑定 容易被拼接</p></li><li><p>拼接 HTML 插入，要注意</p></li><li><p>插入属性和链接时 注意拼接问题</p></li></ol><h3 id="vue-中措施" tabindex="-1"><a class="header-anchor" href="#vue-中措施" aria-hidden="true">#</a> vue 中措施</h3><p>引用官方原话：“第一原则 永远不要使用不可信任的模板”</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span> userProvidedString <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 永远不要这样做</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="框架已经做了的处理" tabindex="-1"><a class="header-anchor" href="#框架已经做了的处理" aria-hidden="true">#</a> 框架已经做了的处理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* HTML */</span>
<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> userProvidedString <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token comment">// 如果 userProvidedString 等于 &#39;&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;&#39;</span>
<span class="token comment">// 会被转义为 &amp;lt;script&amp;gt;alert(&amp;quot;hi&amp;quot;)&amp;lt;/script&amp;gt;</span>
<span class="token comment">// 这些转义是通过浏览器原生API 只要浏览器没有漏洞就不存在风险</span>

<span class="token comment">/* 属性 */</span>
<span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">&quot;userProvidedString&quot;</span><span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token comment">// 如果 userProvidedString 等于 &#39;&quot; onclick=&quot;alert(\\&#39;hi\\&#39;)&#39;</span>
<span class="token comment">// 会被转义为 &amp;quot; onclick=&amp;quot;alert(&#39;hi&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="需要自主解决" tabindex="-1"><a class="header-anchor" href="#需要自主解决" aria-hidden="true">#</a> 需要自主解决</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.</span>
<span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">&quot;userProvidedUrl&quot;</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
<span class="token comment">// 这里 userProvidedUrl  是需要过滤的 否则还是可能 被注入 javascript 脚本</span>

<span class="token comment">// 2.</span>
<span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;style&quot;</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> style <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
<span class="token comment">// 避免用户直接渲染样式，例：登录页覆盖提交按钮，跳转到钓鱼登录页 ，骗取用户登录名和账号</span>

<span class="token comment">// 3.</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 
<span class="token comment">// 元素, 不允许直接渲染</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="cps" tabindex="-1"><a class="header-anchor" href="#cps" aria-hidden="true">#</a> CPS</h2><p>指令配置：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</p><p>Content-Security-Policy-Report-Only 允许 web 开发人员通过监测 (但不强制执行) 政策的影响来尝试政策</p><h3 id="两种使用方式" tabindex="-1"><a class="header-anchor" href="#两种使用方式" aria-hidden="true">#</a> 两种使用方式</h3><ol><li>前端直接使用</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 一个网站所有内容均来自站点的同一个源 (不包括其子域名) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>后端服务配置</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Nginx 配置示例</span>
add_header  Content-Security-Policy  <span class="token string">&quot;default-src &#39;self&#39;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[p];function l(i,c){return n(),a("div",null,o)}const u=s(t,[["render",l],["__file","xss.html.vue"]]);export{u as default};

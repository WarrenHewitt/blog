import{_ as l,M as c,p as i,q as u,R as n,N as a,V as p,t as s,a1 as o}from"./framework-7e1a102e.js";const r={},k={class:"table-of-contents"},d=o(`<p>[toc]</p><h1 id="generator-生成器-学习理解与实践" tabindex="-1"><a class="header-anchor" href="#generator-生成器-学习理解与实践" aria-hidden="true">#</a> Generator(生成器) 学习理解与实践</h1><blockquote><p>created at 2019-04-08</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>异步编程解决方案</li><li>可理解为一种状态机，封装了多个内部状态</li><li>可返回一个指向内部状态的指针对象（遍历器对象Interator），所以可理解为其是一个遍历器对象生成函数</li><li>yield(产出),定义不同的内部状态，yield后跟表达式。</li><li>yield 表达式只能放在Generator函数中</li><li>(yield 表达式) 整个没有返回值，next()的参数可以被认为是上一个yield的返回值。</li><li>V8引擎直接忽略第一次next()的参数，因为没有上一次yield</li><li>调用next方法，是指针从函数头部或上一次停止的地方开始执行，直到遇到下一个yield表达式或return</li><li>当next的返回值的value属性为yield后表达式的结果或return后的值，done属性为true时表示遍历yield结束</li><li>对象中使用const obj = { * myGeneratorMethod(){} } 等同于 obj = { myGeneratorMethod：function* (){} }</li><li>yield* 用于在一个generator函数中执行另一个generator函数，并且会将另一个的yield全部执行完毕才会继续执行当前generator中的yield</li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一个yield之前的语句&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;yield 1&#39;</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;yield 3: 在表达式中要加括号&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">&#39;yield 2: in expression&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;yield 之后 return之前&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;return&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> gt <span class="token operator">=</span> <span class="token function">generatorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历器对象</span>

<span class="token comment">/*
* 第一次调用是从函数头部开始执行，如果没有yield，也需要执行一次next才会执行这些语句
*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gt<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一个yield之前的语句</span>
<span class="token comment">// {value: &quot;yield 1&quot;, done: false}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gt<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &quot;yield 2: in expression&quot;, done: false}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gt<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &quot;yield 3: 在表达式中要加括号undefined&quot;, done: false}</span>
<span class="token comment">// 上面出现undefined的原因是next没有加参数</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gt<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// yield 之后 return之前</span>
<span class="token comment">// {value: &quot;return&quot;, done: true}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gt<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &quot;undefined&quot;, done: true}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现斐波拉契数列" tabindex="-1"><a class="header-anchor" href="#实现斐波拉契数列" aria-hidden="true">#</a> 实现斐波拉契数列</h2>`,8),v={href:"https://github.com/WarrenHewitt/blog/issues/blob/master/algorithm/algorithm.md",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="给原生对象添加iterator" tabindex="-1"><a class="header-anchor" href="#给原生对象添加iterator" aria-hidden="true">#</a> 给原生对象添加Iterator</h2><p>先展示for of 对generator的作用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorForOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
* for of 可以遍历Generator生成的Iterator对象
* 这里不能再遍历 gt 因为它已执行完毕
* 不会遍历return的值
*/</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token function">generatorForOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;for of :&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给原生对象添加iterator, 让其可以被for of 遍历</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">objectAddIterator</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> nativeObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;symbol c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token function">objectAddIterator</span><span class="token punctuation">(</span>nativeObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> key <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span> <span class="token operator">?</span> key<span class="token punctuation">.</span>description <span class="token operator">:</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><h3 id="异步ajax请求" tabindex="-1"><a class="header-anchor" href="#异步ajax请求" aria-hidden="true">#</a> 异步ajax请求</h3>`,7),b={href:"https://github.com/WarrenHewitt/blog/issues/blob/master/blog-files/toastAndLoading.md",target:"_blank",rel:"noopener noreferrer"},g=o(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ajax<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>初始数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">getSomeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>请求ajax数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">ajaxFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            ar<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;ajax返回结果&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">asyncReqData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">loading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">ajaxFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token function">loading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> ar <span class="token operator">=</span> <span class="token function">asyncReqData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ar<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getSomeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ajax&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> res
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="控制同步操作的流程" tabindex="-1"><a class="header-anchor" href="#控制同步操作的流程" aria-hidden="true">#</a> 控制同步操作的流程</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">controlFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> child1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">&#39;return 1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">&#39;return 2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> child2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">&#39;return 3&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">&#39;return 4&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorControl</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;===========&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">yield</span> child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span> child1<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span> child2<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">parentFn</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> p<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">generatorControl</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> step <span class="token keyword">of</span> <span class="token function">parentFn</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">controlFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本文包括对generate基础的学习与练习，与一些心得！【会持续学习，更新】</p><p><strong>推荐使用 async 函数</strong></p><p>详细学习请移步下方参考链接</p><p>参考:</p>`,8),f={href:"http://es6.ruanyifeng.com/#docs/generator",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/WarrenHewitt/blog/issues",target:"_blank",rel:"noopener noreferrer"};function h(w,x){const t=c("router-link"),e=c("ExternalLinkIcon");return i(),u("div",null,[n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#总结"},{default:p(()=>[s("总结")]),_:1})]),n("li",null,[a(t,{to:"#基础语法"},{default:p(()=>[s("基础语法")]),_:1})]),n("li",null,[a(t,{to:"#实现斐波拉契数列"},{default:p(()=>[s("实现斐波拉契数列")]),_:1})]),n("li",null,[a(t,{to:"#给原生对象添加iterator"},{default:p(()=>[s("给原生对象添加Iterator")]),_:1})]),n("li",null,[a(t,{to:"#应用场景"},{default:p(()=>[s("应用场景")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#异步ajax请求"},{default:p(()=>[s("异步ajax请求")]),_:1})]),n("li",null,[a(t,{to:"#控制同步操作的流程"},{default:p(()=>[s("控制同步操作的流程")]),_:1})])])])])]),d,n("p",null,[n("a",v,[s("链接"),a(e)])]),m,n("p",null,[s("代码中的loading函数代码行数较多，也并非关键代码，所以不作展示。"),n("a",b,[s("查看loading代码"),a(e)])]),g,n("ul",null,[n("li",null,[n("a",f,[s("参考文章"),a(e)])])]),n("blockquote",null,[n("p",null,[s("欢迎交流 "),n("a",y,[s("Github"),a(e)])])])])}const j=l(r,[["render",h],["__file","generator.html.vue"]]);export{j as default};

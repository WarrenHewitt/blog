import{_ as l,M as e,p as u,q as i,R as n,N as s,V as p,t as a,a1 as o}from"./framework-7e1a102e.js";const k={},r={class:"table-of-contents"},d=o(`<p>[toc]</p><p>Array</p><ul><li><code>.isArray(被判断的值)</code> 判断是否是数组</li></ul><h2 id="伪数组-array-like" tabindex="-1"><a class="header-anchor" href="#伪数组-array-like" aria-hidden="true">#</a> 伪数组(Array like)</h2><p>arguments, getElementsByTagName, document.childNodes 之类返回 NodeList 对象都属于伪数组。不能应用 push , pop 等方法。</p><p>当给其定义了 push 方法后，是根据定义的length 在指定的下标处开始插入</p><p>将伪数组转化为数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// A.prototype.slice.call(arguments) || [].slice.call(arguments) // 将带有length属性的对象转为数组</span>
<span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">length</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  [&quot;first&quot;, &quot;second&quot;]  返回的是 稀疏数组  也就是可能有 [1, empty, 2]  forEach 循环打印时输出空  直接访问输出 undefined</span>

<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有空的位置 赋值 undefined</span>
<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><code>.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组；如：将字符串、Set、Map、arguments 转为数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span>
<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot; ]</span>
<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined, undefined]</span>
<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span>\` <span class="token comment">// [2,4,6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.reduce(callback, 初始值(如果不设置默认为数组第一个值))</code> 对数组中的每个元素执行一个提供的reducer函数，将结果汇总为单个返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
<span class="token comment">// accumulator 上一次返回的值 currentValue 当前值 index 当前正在处理的元素索引</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token comment">// accumulator 这里没有设置初始值，其值为数组第一个，也就是 2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// index 从1开始，这里是没有设置初始值</span>
    <span class="token keyword">var</span> r <span class="token operator">=</span> accumulator
    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue <span class="token operator">*</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 132</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="展平数组" tabindex="-1"><a class="header-anchor" href="#展平数组" aria-hidden="true">#</a> 展平数组</h2><p>将一维数组转换为二维数组查看 docs\\fe\\tools\\publicFn.md</p><p>flat(展平层级:数字(默认1)或 Infinity ) 会过滤数组中的空值 返回新数组</p><p>flatMap(() =&gt; {}): 对原数组执行一个map操作，然后再执行flat 只能展开一层数组 返回新数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 方式一 */</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 5, 6, 7, 9]</span>

<span class="token comment">/* 方式二 */</span>
<span class="token keyword">function</span> <span class="token function">flatArray</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">?</span> r<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatArray</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> r<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filter-map-foreach-some-every-find-findindex-includes" tabindex="-1"><a class="header-anchor" href="#filter-map-foreach-some-every-find-findindex-includes" aria-hidden="true">#</a> filter/map/forEach/some/every/find/findIndex/includes</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 返回符合条件的新数组,没有赋值或删除了的项，会被跳过</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 返回新数组，数组项不变，但值可做修改</span>
<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;v&#39;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回undefind， 这里对 v 的操作是对原对象的操作</span>
<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 返回 Boolean； 回调函数有一个返回 true，则返回true, 有true返回则结束循环</span>
<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 返回 Boolean； 回调函数每一个返回 true，则返回true, 有false返回则结束循环</span>
<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 返回第一个符合的值</span>
<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 返回第一个符合的值的数组下标(没有返回-1与indexOf一致) 与 indexOf 区别为传入的参数，前者为函数,函数有利于匹配数组项为对象</span>
<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 参数可以是字符或字符串</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;some value&#39;</span><span class="token punctuation">)</span> <span class="token comment">// return true/false ,与indexOf相比，可以避免返回的0，判断时的错误</span>
<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value填充值<span class="token punctuation">[</span><span class="token punctuation">,</span> start起使下标，默认<span class="token number">0</span><span class="token punctuation">[</span><span class="token punctuation">,</span> end结束下标默认length<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// \`[1,2,3]\`; 区别 \`new Array(3)\` 返回 \`[ , , ]\`</span>
<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 参数：正整数、负整数，获取指定位置的成员  最后以为 at(-1)</span>
<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">,</span>z3<span class="token punctuation">,</span>z4<span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 会直接对当前数组进行修改；  </span>
<span class="token comment">// 取出从下标为x（下标从0开始）开始的y个数组值，进行修改；  </span>
<span class="token comment">// z参数不加：就删除数组中的这几个数；相当于用空来替换这些数  </span>
<span class="token comment">// y参数为0：在x前面插入z； </span>
<span class="token comment">// y参数为1：将x替换为z；  </span>
<span class="token comment">// 该方法返回被删的数组值；</span>


<span class="token literal-property property">forEach</span><span class="token operator">:</span> 是 <span class="token keyword">for</span> <span class="token operator">+</span> callback 的 封装 所以和 <span class="token keyword">async</span> 搭配用时 也会出现异步，可以用 <span class="token keyword">for</span> <span class="token keyword">of</span> 替代，它是用迭代器实现的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><code>.slice(start(包含),end(不包含，默认到最后且包含))</code> 返回新数组 <code>&#39;abcdef&#39;.slice(-2,-1) // e</code></li></ul><hr><ul><li><p><code>.join(&#39;!&#39;)</code> 将数组的每个元素放到一个字符串中，不传参就用逗号隔开(此时与toString() 方法一样),传就用该符号</p></li><li><p><code>array.push(element1[, ...[, elementN]]);</code> 末尾压栈，返回<strong>数组长度</strong>；通过索引值来添加比push方法更快</p></li><li><p><code>.pop()</code> 末尾出栈，返回去掉的值</p></li><li><p><code>.shift()</code> 对头出栈，返回去掉的值</p></li><li><p><code>.unshift()</code> 对头入栈，返回数组长度</p></li><li><p><code>.reverse()</code>; 逆向排序的数组 返回数组的引用</p></li><li><p><code>.sort()</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 取数组中的两个数 a, b</span>
    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span> <span class="token comment">// 注意这里是 a-b 如果是 b-a ab的位置会相反</span>
    <span class="token comment">// 重点关注返回值即刻</span>
    <span class="token comment">// 返回0 位置不变</span>
    <span class="token comment">// 返回负数 a放到b左边（简单理解为降序）nde</span>
    <span class="token comment">// 返回正数 a放到b右边（简单理解为升序）</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 处理对象字符串 升序</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>name <span class="token operator">===</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 默认小到大排列（即没有compare函数）按照数组元素对应的字符串的 Unicode 从小到大进行排序。  </span>
<span class="token comment">// 比较数字可以简单的使用(升序)</span>
<span class="token keyword">function</span> <span class="token function">compareNumber</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> a <span class="token operator">-</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reverse 和 sort 都是直接操作原数组 返回数组引用</p><p>arrayA.concat(arrayB); 返回拼接后的新数组，不会覆盖数组间重复的值</p><p>var newArray = [].concat(valueN,valueN,valueN) valueN 可以是值或数组</p><hr><h2 id="set-weakset-map-weakmap" tabindex="-1"><a class="header-anchor" href="#set-weakset-map-weakmap" aria-hidden="true">#</a> Set/Weakset Map/Weakmap</h2>`,30),m={href:"https://es6.ruanyifeng.com/#docs/set-map",target:"_blank",rel:"noopener noreferrer"},v=o(`<ul><li>map 和 set 有 forEach 方法可以用</li></ul><ol><li>Set: 和数组类似但是，但是成员唯一，不能使用下标方式获取值</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>   <span class="token comment">// 参数可以是数组或类似数组的对象{0:&#39;a&#39;,1:&#39;b&#39;,2:&#39;c&#39;}。  </span>
<span class="token comment">// 在set内部两个NAN是相等的，两个对象总是不等的</span>
<span class="token comment">// 四个方法：  </span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 添加值 返回set结构本身  </span>
set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 删除值 返回布尔值，表示是否成功  </span>
set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 检测是否为set成员 返回布尔值  </span>
set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 清除所有成员 没有返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>WeakSet</p><ul><li>成员只能是对象</li><li>构造函数可以接收一个数组为参数，数组的成员将被设置为 WeakSet 的成员，所以数成员必须为对象</li><li>WeakSet 中的对象都为弱引用，及当检测到值没有被其它地方引用时，会直接回收内存，不考虑 WeakSet 还在引用</li><li>不能遍历</li></ul></li><li><p>Map 是键值对的形式的，但是键的形式不只是字符 可以遍历</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hew&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 构造函数接受一个数组，数组的成员是表示键值对的数组</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;kk&#39;</span> <span class="token punctuation">}</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;add a object key&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// add a object key</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hew</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>WeakMap <ul><li>只接受对象作为键名</li><li>键名所指向的对象，不计入垃圾回收机制</li><li>不能遍历</li></ul></li></ol><h2 id="数组空位" tabindex="-1"><a class="header-anchor" href="#数组空位" aria-hidden="true">#</a> 数组空位</h2><p>数组的某个位置没有值</p><h3 id="产生" tabindex="-1"><a class="header-anchor" href="#产生" aria-hidden="true">#</a> 产生</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 三个空位数组</span>
<span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token comment">// 同上</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// 三个空位</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// a[3] 是空位</span>
<span class="token keyword">delete</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// a[0] 是空位 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>console 输出空位 会显示 undefined；但实质上是空位，不是 undefined</p></li><li><p><code>[undefined]</code> 不是空位</p></li><li><p>forEach,filter,every,some 会跳过空位；map 会跳过空位，会保留这个值，但回调不会被调用</p></li><li><p>join，toString 会将 undefined null 处理成空字符串</p></li><li><p>.from, (...) 转成 undefined</p></li></ul>`,11);function b(f,g){const t=e("router-link"),c=e("ExternalLinkIcon");return u(),i("div",null,[n("nav",r,[n("ul",null,[n("li",null,[s(t,{to:"#伪数组-array-like"},{default:p(()=>[a("伪数组(Array like)")]),_:1})]),n("li",null,[s(t,{to:"#展平数组"},{default:p(()=>[a("展平数组")]),_:1})]),n("li",null,[s(t,{to:"#filter-map-foreach-some-every-find-findindex-includes"},{default:p(()=>[a("filter/map/forEach/some/every/find/findIndex/includes")]),_:1})]),n("li",null,[s(t,{to:"#set-weakset-map-weakmap"},{default:p(()=>[a("Set/Weakset Map/Weakmap")]),_:1})]),n("li",null,[s(t,{to:"#数组空位"},{default:p(()=>[a("数组空位")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#产生"},{default:p(()=>[a("产生")]),_:1})])])])])]),d,n("p",null,[n("a",m,[a("更多用法 参考"),s(c)])]),v])}const y=l(k,[["render",b],["__file","array.html.vue"]]);export{y as default};

import{_ as e,M as o,p as c,q as l,R as n,N as a,V as t,t as p,a1 as i}from"./framework-7e1a102e.js";const r={},u={class:"table-of-contents"},k=i(`<p>[toc]</p><hr><ul><li>引用 npm 包，先装对应types/*，再装包</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 没有第三方typescript包时： 在根目录下创建 types 文件夹，创建 模块名+d.ts 文件，文件内容为</span>
declare module <span class="token string">&#39;co-busboy&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">content</span><span class="token operator">:</span> any
  <span class="token keyword">export</span> <span class="token operator">=</span> content
<span class="token punctuation">}</span>

<span class="token comment">// 2. 在 tsconfig.json 的 include 中加上 types 文件夹</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>@types/node 可以引入node相关所有包</p></li><li><p>安装 yarn add typescript -D</p></li><li><p>TS 文件如果使用export导出，文件中的变量会被当做内部变量(闭包)，不会认为与其它文件下的变量重名</p></li><li><p>export/import Sometype 表示Sometype只是一个类型, 在编译的时候把这段代码删除掉</p></li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>string number boolean null undefined any</p><p>不设置就默认初始赋值的类型</p><p>never 返回 never 的函数，表示函数无法执行到最后，比如中途有抛出错误，或出现死循环</p><h3 id="结构制定类型" tabindex="-1"><a class="header-anchor" href="#结构制定类型" aria-hidden="true">#</a> 结构制定类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">:</span> any  <span class="token operator">=</span> <span class="token function">data</span>

<span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span>string<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Keys</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span> <span class="token comment">// 传入什么类型返回什么类型，T可以改为任意字母就是泛指代表</span>
    <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="混合类型" tabindex="-1"><a class="header-anchor" href="#混合类型" aria-hidden="true">#</a> 混合类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">(</span>string<span class="token operator">|</span>number<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token string">&#39;&#39;</span>
<span class="token punctuation">{</span> name<span class="token operator">?</span><span class="token operator">:</span>string  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">list</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 使用数组泛型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h4><p>固定长度 不能用push 不能改变小标长度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token punctuation">,</span>boolean<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><p>默认 返回 void</p><p>定义了返回类型 必须加 return</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fn</span><span class="token punctuation">(</span>p1<span class="token operator">?</span><span class="token operator">:</span>string<span class="token punctuation">,</span> p2<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span>  
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">(</span>string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h3><p>前端一般用于定义错误码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">enum</span> ErrorCode <span class="token punctuation">{</span>
    Success<span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">}</span>
ErrorCode<span class="token punctuation">.</span>Success
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口-interface" tabindex="-1"><a class="header-anchor" href="#接口-interface" aria-hidden="true">#</a> 接口 Interface</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>props<span class="token operator">:</span>string<span class="token punctuation">]</span><span class="token operator">:</span>any<span class="token punctuation">,</span>
    readonly age<span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Func</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span>string<span class="token punctuation">)</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

type person <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span>  <span class="token comment">// 既可以是 A 也可以是 B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><p>类似 类型转换</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 使用JSX时，只有 as语法断言是被允许的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h3><p>https://www.tslang.cn/docs/handbook/advanced-types.html 表示一个值可以是几种类型之一。 用竖线（|）分隔每个类型</p><h2 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量" aria-hidden="true">#</a> 定义变量</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">(</span>string<span class="token operator">|</span>number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;ko&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// 对象</span>
<span class="token keyword">interface</span> <span class="token class-name">obj</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span>propName<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span> <span class="token comment">// 任意属性</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">o</span><span class="token operator">:</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><ul><li>静态属性，存在于类本身上面而不是类的实例上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">obj</span><span class="token operator">:</span>object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 泛对象</span>

<span class="token keyword">class</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span> <span class="token comment">// 有良好的类型提示</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string
    <span class="token literal-property property">age</span><span class="token operator">:</span> number
    other<span class="token operator">?</span><span class="token operator">:</span>string
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>tsconfig.json 是项目的主要 TypeScript 配置文件，它引用了其他两个配置文件, tsconfig.node.json 和 tsconfig.app.json 分别是用于 Node.js(比如启动本地node服务，会执行的文件) 和 应用程序的 TypeScript 配置文件。它们的作用是为不同的构建目标提供不同的 TypeScript 编译选项。</p><ul><li><p><code>npx tsc --init</code> 初始化一个配置文件 如果先安装了 typescript 直接运行 <code>tsc --init</code></p></li><li><p>tsc --watch 监控ts文件变化 实时生成 js 文件</p></li></ul><p>运行 tsc 时 会默认在根目录下找 <code>tsconfig.json</code> 可以用 --project -p 指定包含配置文件的目录</p><p><code>tsconfig.json</code> 文件修改后不用重启服务</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 常规必要配置</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 使用&quot;include&quot;引入的文件可以使用&quot;exclude&quot;属性过滤</span>
        <span class="token string">&quot;src/**/*&quot;</span> <span class="token comment">// 包含文件夹</span>
        <span class="token string">&quot;crossProjectModule/**/*&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 如果有不在src的目录需要单独添加 </span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 默认情况下会排除node_modules，bower_components，jspm_packages和&lt;outDir&gt;目录</span>
        <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 编译选项 https://www.typescriptlang.org/tsconfig  https://www.tslang.cn/docs/handbook/compiler-options.html</span>
        <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 将ts代码编译为哪个版本的js  1.如果是node执行，用最新的 ESNext 即可 值代表你的 TypeScript 所支持的最高版本 es5 es6</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 用那种模块系统；target 为 ES5或ES3 默认 CommonJs 模块标准;  node 运行 commonjs； 浏览器用  es6 或 es2015</span>
        <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 删除注释</span>
        <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>                           
            <span class="token property">&quot;@cross/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 自定义别名</span>
                <span class="token string">&quot;./crossProjectModule/*&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它配置项说明</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">/* 具体配置 参考 https://juejin.cn/post/6844904109976322061#heading-10 */</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 使用&quot;include&quot;引入的文件可以使用&quot;exclude&quot;属性过滤</span>
        <span class="token string">&quot;src/**/*&quot;</span> <span class="token comment">// 包含文件夹</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 默认情况下会排除node_modules，bower_components，jspm_packages和&lt;outDir&gt;目录</span>
        <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;**/*.spec.ts&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 指定文件  通过 &quot;files&quot;属性明确指定的文件却总是会被包含在内，不管&quot;exclude&quot;如何设置</span>
        <span class="token string">&quot;xx.ts&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// 编译选项 https://www.typescriptlang.org/tsconfig  https://www.tslang.cn/docs/handbook/compiler-options.html</span>
        <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>                             <span class="token comment">// 路径映射，相对于 baseUrl</span>
            <span class="token property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>           <span class="token comment">// ts源文件目录 Specify what module code is generated. */</span>
        <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;out|./out&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定输出目录 会在根目录下创建 /out 文件夹</span>
        <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 使用装饰器，vscode也要打开ts插件的配置</span>
        <span class="token property">&quot;incremental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 增量编译</span>
        <span class="token property">&quot;tsBuildInfoFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./buildFile&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// 增量编译文件的存储位置</span>
        <span class="token property">&quot;diagnostics&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 打印编译信息</span>
        <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./app.js&quot;</span><span class="token punctuation">,</span>     <span class="token comment">// 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中</span>
        <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token comment">// TS 需要引用的库，即声明文件，es5 默认 &quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;</span>
        <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment">// 允许编译 JS 文件（js、jsx）</span>
        <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment">// 允许在JS 文件中报错，通常与 allowJS 一起使用</span>
        <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment">// 生成声明文件</span>
        <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./d&quot;</span><span class="token punctuation">,</span>     <span class="token comment">// 声明文件的路径</span>
        <span class="token property">&quot;emitDeclarationOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 只生成声明文件</span>
        <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment">// 生成目标文件的 sourceMap / 生成相应的 .map文件</span>
        <span class="token property">&quot;inlineSourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 生成目标文件的 inline sourceMap</span>
        <span class="token property">&quot;declarationMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token comment">// 生成声明文件的 sourceMap</span>
        <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token comment">// 声明文件目录，默认 node_modules/@types</span>
        <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token comment">// 声明文件包</span>
        <span class="token property">&quot;preserveConstEnums&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 保留 const 和 enum 声明</span>
        <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 不输出文件</span>
        <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 发生错误时不输出文件</span>
        <span class="token property">&quot;noEmitHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 不生成 helper 函数，需额外安装 ts-helpers</span>
        <span class="token property">&quot;importHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 通过 tslib 引入 helper 函数，文件必须是模块</span>
        <span class="token property">&quot;downlevelIteration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 降级遍历器的实现（es3/5）</span>
        <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">// 开启所有严格的类型检查</span>
        <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                 <span class="token comment">// 在代码中注入 &quot;use strict&quot;;</span>
        <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token comment">// 不允许隐式的 any 类型</span>
        <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>             <span class="token comment">// 不允许把 null、undefined 赋值给其他类型变量</span>
        <span class="token property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment">// 不允许函数参数双向协变</span>
        <span class="token property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 类的实例属性必须初始化</span>
        <span class="token property">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment">// 严格的 bind/call/apply 检查</span>
        <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token comment">// 不允许 this 有隐式的 any 类型</span>
        <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 检查只声明，未使用的局部变量</span>
        <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 检查未使用的函数参数</span>
        <span class="token property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 防止 switch 语句贯穿</span>
        <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">// 每个分支都要有返回值</span>
        <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 允许 export = 导出，由import from 导入</span>
        <span class="token property">&quot;allowUmdGlobalAccess&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 允许在模块中访问 UMD 全局变量</span>
        <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>            <span class="token comment">// 模块解析策略</span>
        <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 解析非相对模块的基地址</span>
        <span class="token property">&quot;rootDirs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;util&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token comment">// 将多个目录放在一个虚拟目录下，用于运行时</span>
        <span class="token property">&quot;listEmittedFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 打印输出的文件</span>
        <span class="token property">&quot;listFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 打印编译的文件（包括引用的声明文件）</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49);function d(m,v){const s=o("router-link");return c(),l("div",null,[n("nav",u,[n("ul",null,[n("li",null,[a(s,{to:"#数据类型"},{default:t(()=>[p("数据类型")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#结构制定类型"},{default:t(()=>[p("结构制定类型")]),_:1})]),n("li",null,[a(s,{to:"#泛型"},{default:t(()=>[p("泛型")]),_:1})]),n("li",null,[a(s,{to:"#混合类型"},{default:t(()=>[p("混合类型")]),_:1})]),n("li",null,[a(s,{to:"#数组"},{default:t(()=>[p("数组")]),_:1})]),n("li",null,[a(s,{to:"#函数"},{default:t(()=>[p("函数")]),_:1})]),n("li",null,[a(s,{to:"#枚举"},{default:t(()=>[p("枚举")]),_:1})]),n("li",null,[a(s,{to:"#接口-interface"},{default:t(()=>[p("接口 Interface")]),_:1})]),n("li",null,[a(s,{to:"#类型断言"},{default:t(()=>[p("类型断言")]),_:1})]),n("li",null,[a(s,{to:"#联合类型"},{default:t(()=>[p("联合类型")]),_:1})])])]),n("li",null,[a(s,{to:"#定义变量"},{default:t(()=>[p("定义变量")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#function"},{default:t(()=>[p("Function")]),_:1})]),n("li",null,[a(s,{to:"#类"},{default:t(()=>[p("类")]),_:1})])])]),n("li",null,[a(s,{to:"#配置文件"},{default:t(()=>[p("配置文件")]),_:1})])])]),k])}const q=e(r,[["render",d],["__file","typescript.html.vue"]]);export{q as default};

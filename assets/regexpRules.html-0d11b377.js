import{_ as p,M as c,p as l,q as i,R as n,N as a,V as e,t,a1 as o}from"./framework-7e1a102e.js";const r={},u={class:"table-of-contents"},d=o(`<p>[toc]</p><h2 id="正则匹配" tabindex="-1"><a class="header-anchor" href="#正则匹配" aria-hidden="true">#</a> 正则匹配</h2><h3 id="常用规则" tabindex="-1"><a class="header-anchor" href="#常用规则" aria-hidden="true">#</a> 常用规则</h3><h4 id="phone-number-电话号码" tabindex="-1"><a class="header-anchor" href="#phone-number-电话号码" aria-hidden="true">#</a> phone number 电话号码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(1[356789]\\d|14[57])\\d{8}$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="replace-all-non-numeric-characters-and-starting-with-0-替换所有0和非数字字符串" tabindex="-1"><a class="header-anchor" href="#replace-all-non-numeric-characters-and-starting-with-0-替换所有0和非数字字符串" aria-hidden="true">#</a> replace all non-numeric characters and starting with 0 替换所有0和非数字字符串</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^1-9]+|[^\\d]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="integer-整数" tabindex="-1"><a class="header-anchor" href="#integer-整数" aria-hidden="true">#</a> integer 整数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^-[1-9]|^0$|^[1-9])\\d*$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="natural-number-自然数-0-1-2" tabindex="-1"><a class="header-anchor" href="#natural-number-自然数-0-1-2" aria-hidden="true">#</a> natural number 自然数(0,1,2...)</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^0$|^[1-9])\\d*$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="positive-integer-正整数" tabindex="-1"><a class="header-anchor" href="#positive-integer-正整数" aria-hidden="true">#</a> positive integer 正整数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\\d*$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="只包含数字字母中文" tabindex="-1"><a class="header-anchor" href="#只包含数字字母中文" aria-hidden="true">#</a> 只包含数字字母中文</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([\\u4e00-\\u9fa5]|[A-Za-z0-9])+$</span><span class="token regex-delimiter">/</span></span>

<span class="token operator">/</span><span class="token punctuation">[</span>\\u4E00<span class="token operator">-</span>\\u9FA5<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>\\uFE30<span class="token operator">-</span>\\uFFA0<span class="token punctuation">]</span><span class="token operator">/</span>gi<span class="token punctuation">;</span> <span class="token comment">// 包含中文或中文字符,注意 反斜线</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除前后空格" tabindex="-1"><a class="header-anchor" href="#删除前后空格" aria-hidden="true">#</a> 删除前后空格</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((^\\s+)|(\\s+$))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 用 .trim() 同效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h4><p>或使用：https://github.com/js-cookie/js-cookie</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=([^&amp;]*)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="positive-integers-or-decimals-正数和零" tabindex="-1"><a class="header-anchor" href="#positive-integers-or-decimals-正数和零" aria-hidden="true">#</a> positive (integers or decimals) 正数和零</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^0|^[1-9]\\d*)([.]\\d+)?$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="remove-the-leading-and-trailing-spaces-删除首尾空格" tabindex="-1"><a class="header-anchor" href="#remove-the-leading-and-trailing-spaces-删除首尾空格" aria-hidden="true">#</a> Remove the leading and trailing Spaces 删除首尾空格</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\\s*|\\s*$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="以字母开头-包含字母、数字、-、" tabindex="-1"><a class="header-anchor" href="#以字母开头-包含字母、数字、-、" aria-hidden="true">#</a> 以字母开头，包含字母、数字、_、-</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]([a-zA-Z0-9-_])+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="简易邮箱验证" tabindex="-1"><a class="header-anchor" href="#简易邮箱验证" aria-hidden="true">#</a> 简易邮箱验证</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z-_]+@[^.]+\\.[^.]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>匹配 <span class="token constant">URL</span>： <span class="token comment">// /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&amp;//=]*)/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="相关概念及语法" tabindex="-1"><a class="header-anchor" href="#相关概念及语法" aria-hidden="true">#</a> 相关概念及语法</h3><p>两种创建方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regexp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">const</span> regexp2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">12</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token comment">//不适用于要用到变量，但是适用于有转义的，主要因为字符不加引号。 </span>

regexp1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment">// value 会被转换为字符串 返回 \`treu/false\`</span>

<span class="token keyword">const</span> <span class="token function-variable function">regExpTest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>g:全局匹配 查找所有的匹配而非在找到第一个匹配后就停止；</li><li>i:不分大小写；</li><li>m: 多行匹配； ^和$任意一行的行首和行尾进行匹配</li><li>s 单行匹配</li></ul><hr><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 分组可以用 $1, $2, $3, $4, $5, $6, $7, $8, $9来获取 只有1-9 </span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;1-2-3-4-5-6-7-8-9&#39;</span>
<span class="token keyword">var</span> ab <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+)-(\\d)-(\\d+)-(\\d+)-(\\d+)-(\\d+)-(\\d+)-(\\d+)-(\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;regexp&#39;</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
<span class="token keyword">var</span> cd <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1-2-(.{3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token comment">// 值被更新了</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;regexp&#39;</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3-4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>用选择&#39;或&#39;|时 ，要用（）分组将所有的内容括起来；</p></li><li><p><code>$</code> 符号表示这个字符串的结束,并不是从字符最后面开始匹配.<br> /^1\\d{1}$/ 表示匹配以1开始的任意两位数(因为匹配完一位数字后,就表示要匹配的字符串结束了),而不是123这种还要从后面来匹配一次。</p></li><li><p><code>\\u4e00-\\u9fa5</code> 表示在unicode表中的第一个汉字和最后一个汉字</p></li><li><p><code>\\uFE30-\\uFFA0</code> 表示中文符号</p></li><li><p><code>\\un</code> 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</p></li><li><p>[] 多种字符的匹配或：[0-9a-zA-Z] 里面可以是任意字符 但是要注意 - 出现的位置 避免被误认为是范围 其中的特殊字符也不用转义</p></li><li><p>{} {n} 匹配n次；{n,} 最少匹配n次；{n,m} 最少 n次 最多 m次</p></li><li><p><code>\\s</code>: 匹配任何空白字符，包括空格、制表符、换页符等等; <code>\\S</code>: 非空白字符</p></li><li><p>\\w 任意一个字母或数字或下划线，也就是 A~Z,a~z,0~9,_ 中任意一个</p></li><li><p>\\b 匹配单词边界 \\B 匹配非单词边界</p></li><li><p>\\d 匹配数字。</p></li><li><p><code>.</code> 表示匹配单个字符，除了换行和结束</p></li><li><p><code>+</code> 匹配前面的子表达式 一次或多次, + 等价于 {1,}</p></li></ul><hr><p>var str = &#39;a123&#39;</p><ul><li><p>前瞻：查找1前面的a， <code>/a(?=1)/.exec(str)</code> 匹配返回的结果是：a</p></li><li><p>负前瞻：查找后面不是2的a， <code>/a(?!2)/.exec(str)</code> 匹配返回的结果是：a</p></li><li><p>后顾：查找1后面的2， <code>/(?&lt;=1)2/.exec(str)</code> 匹配返回的结果是：2</p></li><li><p>负后顾：查找前面不是a的2， <code>/a(?&lt;!a)2/.exec(str)</code> 匹配返回的结果是：2</p></li></ul><p>以上都为非捕获</p><ul><li>() 表示捕获分组，<code>(?:)</code> 非捕获分组， <code>/a(?:1)/.exec(str)</code> 匹配返回的结果是：a1</li></ul><hr><ul><li>RegExp.test() 检测到有就返回true</li></ul><hr><ul><li>RegExpObject.exec(字符串)：</li></ul><p>没有匹配值返回null，并把lastIndex（属于RegExpObject）置为0；</p><p>当没有用到分组时，返回的数组只有匹配到的第一个字符串，若分组再依次返回分组。</p><p>全局模式下: 当使用了RegExpObject匹配了一次，必须把 <code>RegExpObject.lastIndex</code> 重新置为0，不然它会从新的字符串的 lastIndex 位开始匹配</p><p>非全局模式: 与 match() 方法返回结果一样；返回第一个匹配的结果和其它位置等信息</p><p>exec()还会返回两个属性，index（匹配字符的起始下标），input（被匹配的字符串）</p><p>全局模式下: 用循环只要返回的不是null就一直循环匹配；这种方法获取的信息是最全的，因为每一个匹配值的位置等都有，但 match()只返回一个数组；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;/:a/:b&#39;</span>
<span class="token keyword">const</span> RegExpObject <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:([a-z]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:([a-z]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;:a&quot;, &quot;:b&quot;]</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> resultArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// 先复值 后判断</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">=</span> RegExpObject<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// RegExpObject.exec(str) 主要这句话会反复执行，每次执行的 lastIndex 不一样</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;循环体输出：&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span>  RegExpObject<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>
    <span class="token comment">// 循环体输出： [&quot;:a&quot;, &quot;a&quot;, index: 1, input: &quot;/:a/:b&quot;, groups: undefined] 3</span>
    <span class="token comment">// 循环体输出： [&quot;:b&quot;, &quot;b&quot;, index: 4, input: &quot;/:a/:b&quot;, groups: undefined] 6</span>
    resultArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52);function k(g,v){const s=c("router-link");return l(),i("div",null,[n("nav",u,[n("ul",null,[n("li",null,[a(s,{to:"#正则匹配"},{default:e(()=>[t("正则匹配")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#常用规则"},{default:e(()=>[t("常用规则")]),_:1})]),n("li",null,[a(s,{to:"#相关概念及语法"},{default:e(()=>[t("相关概念及语法")]),_:1})])])])])]),d])}const x=p(r,[["render",k],["__file","regexpRules.html.vue"]]);export{x as default};
